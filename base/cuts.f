      SUBROUTINE CUTS
      IMPLICIT NONE
C----------
C BASE $Id: cuts.f 2190 2018-04-10 12:07:57Z nickcrookston $
C----------
C  THIS SUBROUTINE IS CALLED ONCE PER CYCLE.  IT INITIALIZES THE
C  THINNING SUMMARY ARRAYS AND THEN EXECUTES THE THINNING STRATEGY
C  INDICATED.  CALLS **CLSSTK** AND **AUTSTK** WHICH ARE ENTRY
C  POINTS IN SUBROUTINE **CUTSTK**.  ALSO CALLS **SDICLS**, **CCCLS**,
C  AND **RDCLS** WHICH ARE ENTRY POINTS IN **SDICAL**, CALLS **CUTQFA**
C  TO PROCESS UNEVEN AGE MANAGEMENT ACTION
C
COMMONS
C
C
      INCLUDE 'PRGPRM.F77'
C
C
      INCLUDE 'ARRAYS.F77'
C
C
      INCLUDE 'COEFFS.F77'
C
C
      INCLUDE 'CONTRL.F77'
C
C
      INCLUDE 'OUTCOM.F77'
C
C
      INCLUDE 'PDEN.F77'
C
C
      INCLUDE 'PLOT.F77'
C
C
      INCLUDE 'VARCOM.F77'
C
C
      INCLUDE 'ECON.F77'
C
C
      INCLUDE 'ESHOOT.F77'
C
C
COMMONS
C----------
C  TYPE DECLARATIONS FOR INTERNAL VARIABLES.
C----------
      REAL SPCRT(MAXSP,3),SPCRC(MAXSP,3),SPCRES(MAXSP,3),
     >          SPCBR(MAXSP,3),SPCMR(MAXSP,3),SSNG(MAXTRE),
     >          DSNG(MAXTRE),CTCRWN(MAXTRE),TKCRWN(MAXTRE)
      REAL BASNEW,CUTMAX,FTCUT,CRLEN,CRI,HTI,DHI,DLOW,PPROP
      REAL FEET,PREM2,P,DMAX,REMTPA,DIFF,ORGWK4,TREERD,TEMP,CWDI
      REAL CRBASE,CUT,PREM,XMORE,XLEFT,THIS,TOTCUT,XSZ,V,D,SUMD2,CLKNT
      INTEGER IOLDCR,ISPEC,IMETH,IPRUN,NPRUN,IM,INDX,ISPG,ISPC,IDMR
      INTEGER INEG,IPOS,IG,IULIM,IGRP,IP,IS,IDMCUT,ICUT,JSPCUT,JTYP
      REAL SDIC,STAGEA,STAGEB,CUTEF1,CSDI,CBA,CTPA,VALMAX,VALMIN,CSTOCK
      REAL HTHI,HTLO,DBHHI,DBHLO,RSTOCK,REMOVE,FULSTK,STOCK,CUTEFF
      REAL TARGET,TREES,CMCUT,TSUMD2,TCLKNT,PRLOST,PRDSNG,PRCRWN
      REAL BACUT,BFCUT,CFCUT,TCUT,ZSDI
      REAL CCCLC1,CCCLC21,CCCSDI,CCT,CRADIF,CCCDIF      
      INTEGER IPCHK,NPS,KUT,JPNUM,KDT,IACTK,NP,NTODO,IC,J,ISPCUT
      INTEGER KUTNOW,IT,IVAC,I
      LOGICAL LBAREA,LBELOW,LSPECL,LNOAUT,DEBUG,LPDBH,LNOCUT(MAXTRE)
      LOGICAL LSDI,LPRTND
      REAL PRFMIS(MAXSP,6), LOSS, SALVTPA,CCC
      INTEGER ISHAG,QFATAR,JOSTND1,ICFLAGQFA,JPTGRP,JPT
      CHARACTER VVER*7
      LOGICAL LYARD,LINCL,LPTALL
      LOGICAL LQFA,LZEIDEQFA,DEBUG1,LDELQFA,LPTGROUP
      REAL DIACW,QFAC,TARQFA,VALMINQFA,VALMAXQFA

C     ADDITIONAL RDCLS ARGUMENTS THAT ARE NOT USED IN CUTS
      REAL TPAFAC,DIAMFAC

C----------
C  ACTIVITY ARRAYS
C----------
      INTEGER MYACTS(23)
      REAL    PRMS(7)
      DATA MYACTS/200,201,202,203,206,
     &            222,223,224,225,226,227,228,229,230,231,232,233,234,
     &            235,236,237,
     &            248,249/
C----------
C  DEFINITIONS OF IMPORTANT VARIABLES:
C
C  ACTIVITIES:
C     200 = MINHARV
C     201 = SPECPREF
C     202 = TCONDMLT
C     203 = YARDING   (CURRENTLY TIED TO THE FIRE MODEL)
C     206 = SPLEAVE
C     222 = THINAUTO  (221 ALSO INDICATES THINAUTO)
C
C     223 = THINBTA
C     224 = THINATA
C     225 = THINBBA
C     226 = THINABA
C     227 = THINPRSC
C     228 = THINDBH
C     229 = SALVAGE (ABANDONED, CAN REUSE THIS SLOT. GED 11.23.05)
C     230 = THINSDI
C     231 = THINCC
C     232 = THINHT
C     233 = THINMIST
C     234 = THINRDEN
C     235 = THINPT
C     236 = THINRDSL
C     237 = THINQFA-TPA,BA,SDI
C
C     248 = SETPTHIN
C     249 = PRUNE
C
C  LAUTON = LOGICAL FLAG TO DETECT PRESENCE OF THINAUTO KEYWORD IN
C           THE RUNSTREAM.
C           .TRUE.  IF THINAUTO KEYWORD IS PRESENT
C           .FALSE. OTHERWISE
C  LBAREA = LOGICAL FLAG IF BASAL AREA THINNING IS BEING ATTEMPTED
C           .TRUE.  IF THINABA, THINBBA, OR THINDBH TO A BA TARGET
C           .FALSE. OTHERWISE
C  LBELOW = LOGICAL FLAG IF THINNING FROM BELOW IS BEING ATTEMPTED
C           .TRUE.  IF THINAUTO, THINBTA, OR THINBBA
C           .TRUE.  IF THINSDI, THINCC, THINRDEN, OR THINPT FROM BELOW
C           .FALSE. OTHERWISE
C   LINCL = LOGICAL VARIABLE USED TO INDICATE WHETHER THE TREE, BASED 
C           ON SPECIES, GETS CONSIDERED IN THE CUT OR NOT.
C           .TRUE.  IF THE TREE SHOULD BE CONSIDERED BASED ON SPECIES
C           .FALSE. OTHERWISE
C  LSPECL = LOGICAL FLAG FOR THINNINGS WHICH DO NOT REQUIRE A SORTED
C           REMOVAL PRIORITY LIST
C           .TRUE.  IF THINPRSC, SALVAGE, THINDBH, THINHT, OR
C                   THINSDI, THINCC, OR THINRDEN THAT IS THROUGHOUT 
C                   THE STAND, OR THINPT THROUGHOUT THE POINT.
C           .FALSE. OTHERWISE
C  LNOAUT = LOGICAL FLAG TO SUPPRESS AUTOMATIC THINNINGS WHEN OTHER
C           THINNINGS ARE PRESENT
C           .TRUE.  IF AUTOMATIC THINNING IS TO BE SUPRESSED
C           .FALSE. OTHERWISE
C  LPDBH  = LOGICAL FLAG TO INDICATE SIZE TERM IN REMOVAL PRIORITY
C           .TRUE.  IF DBH IS TO BE USED AS THE SIZE TERM
C           .FALSE. IF HT  IS TO BE USED AS THE SIZE TERM
C  LNOCUT = LOGICAL FLAG TO INDICATE TREE RECORD IS OUTSIDE THE
C           SPECIFIED CUTTING CLASS DBH/HT/SPECIES RANGE
C           .TRUE.  IF THE TREE RECORD IS EXEMPT FROM CUTTING
C           .FALSE. IF THE TREE RECORD CAN BE CONSIDERED FOR CUTTING
C  LSDI   = LOGICAL FLAG TO INDICATE THAT AN SDI, CC, RD OR PT THINNING 
C           IS BEING ATTEMPTED.
C           .TRUE.  IF THINSDI, THINCC, THINRDEN, OR THINPT IS BEING ATTEMPTED
C           .FALSE. OTHERWISE
C  LYARD  = LOGICAL FLAG TO INDICATE THAT YARDING KEYWORD IS ACTIVE
C           .TRUE.  IF YARDING ENABLED; LOSSES MAY OCCUR
C           .FALSE. IF YARDING ABSENT; REMOVALS ARE PERFECT
C  LPRTND = LOGICAL FLAG WHICH INDICATES WHETHER 'PRETEND' MODE IS
C           ACTIVE. THIS FEATURE IS PART OF THE ECON EXTENSION.
C  LPTALL = LOGICAL FLAG TO INDICATE THAT ALL POINTS ARE BEING THINNED
C           WITH THE THINPT KEYWORD (SETPTHIN, PRMS(1)=0)
C    LQFA = LOGICAL RETURN VARIABLE FROM CUTQFA
C           .TRUE. MORE DIAMETER CLASSES TO BE PROCESSED
C           .FALSE. LAST DIAMETER CLASS TO BE PROCESSED
C LDELQFA = LOGICL FLAG TO DELETE THINQFA ACTIVITY IF TARGET .GT. STOCKING
C           SET IN **CUTQFA**
C LPTGROUP= LOGICAL FLAG IS TRUE IF A GROUP OF POINTS IS TO BE PROCESSED
C  JPTGRP = HOLDS THE POINT GROUP NUMBER FOR PROCESSING IN CUTS
C
C  QFATAR = FLAG TO SET THINQFA TARGET 0=BA, 1=TPA, 2= SDI
C
C  CFMIN  = MINIMUM HARVEST IN MERCHANTABLE CUBIC FEET
C  BFMIN  = MINIMUM HARVEST IN MERCHANTABLE BOARD FEET
C  BAMIN  = MINIMUM HARVEST IN SQUARE FEET OF BASAL AREA
C TCFMIN  = MINIMUM HARVEST IN TOTAL CUBIC FEET
C
C  THE FOLLOWING VARIABLES ARE SUMS FOR ALL THINS IN THE CYCLE
C   CFCUT = TOTAL CUBIC FEET CUT
C   BFCUT = TOTAL BOARD FEET CUT
C   BACUT = TOTAL BASAL AREA CUT
C   TCUT  = TOTAL TREES PER ACRE CUT
C   CMCUT = TOTAL MERCHANTABLE CUBIC FEET CUT
C
C  TREES  = TOTAL TREES PER ACRE BEFORE ANY THINNINGS
C  ICFLAG = CUTTING FLAG SET TO ACTIVITY NUMBER - 220
C  RSTOCK = RESIDUAL STOCKING AFTER THIN
C  STOCK  = AMOUNT OF STOCKING IN TPA OR BA ON A STAND LEVEL
C           WHICH IS AVAILABLE TO BE CUT
C  CSTOCK = AMOUNT OF STOCKING IN TPA OR BA IN A SPECIFIED CLASS
C           WHICH IS AVAILABLE TO BE CUT
C  TARGET = AFTER THINNING TARGET IN TPA OR BA
C  REMOVE = AMOUNT OF STOCKING IN TPA OR BA WHICH NEEDS TO BE
C           REMOVED IN THE THIN
C  CUTEFF = CUTTING EFFICIENCY
C  KUTNOW = CODE FROM THINPRSC KEYWORD WHICH INDICATES WHICH TREES
C           ARE BEING REMOVED DURING CURRENT PRESCRIPTION THIN
C  DBHLO  = LOWER DBH CLASS BOUNDARY FOR THIN (GE)
C  DBHHI  = UPPER DBH CLASS BOUNDARY FOR THIN (LT)
C  HTLO   = LOWER HT  CLASS BOUNDARY FOR THIN (GE)
C  HTHI   = UPPER HT  CLASS BOUNDARY FOR THIN (LT)
C  ISPCUT = SPECIES BEING CUT, OR SPECIES CLASS FOR THIN
C  IDMCUT = DWARF MISTLETOE RATING BEING CUT FOR THINMIST
C  VALMIN = LOWER DBH OR HT CLASS BOUNDARY (GE)
C  VALMAX = UPPER DBH OR HT CLASS BOUNDARY (LT)
C  CTPA   = RESIDUAL CLASS TARGET TPA FOR THINDBH OR THINHT
C  CBA    = RESIDUAL CLASS TARGET BA  FOR THINDBH OR THINHT
C
C  AUTMIN = THINAUTO LOWER LIMIT
C  AUTMAX = THINAUTO UPPER LIMIT
C  AUTEFF = THINAUTO CUTTING EFFICIENCY
C
C  WORK ARRAYS:
C     WK2 = STORES REMOVAL PRIORITY DURING TRIAL THINNING, AND
C           STORES TOTAL CF VOLUME REMOVED IN FINAL PASS
C     WK3 = STORES REMOVED TREES PER ACRE
C     WK4 = STORES CURRENT TREES PER ACRE REPRESENTATION OF TREE
C           RECORD, ADJUSTED AS THINNINGS ARE DONE
C     WK5 = STORES REMOVED MERCH CF VOLUME
C     WK6 = STORES REMOVED MERCH BF VOLUME
C
C  THE FOLLOWING ARRAYS STORE VALUES BY SPECIES BY IMC CLASS
C    SPCRT  = REMOVED TREES PER ACRE
C    SPCRC  = REMOVED TOTAL CUBIC FOOT VOLUME
C    SPCRES = RESIDUAL TREES PER ACRE FOLLOWING THINNINGS
C    SPCBR  = REMOVED MERCH BOARD FOOT VOLUME
C    SPCMR  = REMOVED MERCH CUBIC FOOT VOLUME
C
C  THE FOLLOWING ARRAYS STORE VALUES BY THE NOMINAL PERCENTILE
C  DISTRIBUTION VALUES (10,30,50,70,90,100, & TOTAL)
C    ONTREM = REMOVED TREES PER ACRE
C    OCVREM = REMOVED TOTAL CUBIC FOOT VOLUME
C    ONTRES = RESIDUAL TREES PER ACRE FOLLOWING THINNINGS
C    OBFREM = REMOVED MERCH BOARD FOOT VOLUME
C    OMCREM = REMOVED MERCH CUBIC FOOT VOLUME
C
C  ARRAYS RELATED TO YARDLOSS AND PRUNE KEYWORDS
C     SSNG  = SNAGS/ACRE CREATED BY CUTTING, BUT LEFT STANDING
C     DSNG  = SNAGS/ACRE CREATED BY CUTTING, DOWN LEFT IN STAND
C     CTCRWN= TREES/ACRE REMOVED BUT WHOSE CROWNS ARE STILL IN THE
C             STAND. LATER, IN THE PRUNE PROCESSING, THIS IS
C             THE PROPORITON OF THE CROWN THAT HAS BEEN PRUNED.
C     TKCRWN= TREES/ACRE CROWNS TAKEN OUT OF THE STAND
C-----------
C  SEE IF WE NEED TO DO SOME DEBUG. SET VARIANT.
C-----------
      CALL DBCHK (DEBUG,'CUTS',4,ICYC)
      IF (DEBUG) WRITE (JOSTND,9000)
 9000 FORMAT (/' IN CUTS: VALUES OF PROB (15/LINE):'/)
      IF (DEBUG) WRITE (JOSTND,9010) (PROB(I),I=1,ITRN)
 9010 FORMAT (1X,12F10.4)
      CALL VARVER(VVER)
C----------
C  IF TREES GET HERE MARKED FOR DELETION, OR THEY GET HERE WITH ZERO
C  PROB FROM PREVIOUS CYCLE MORTALITY, DELETE THOSE TREE RECORDS.
C----------
      IVAC=0
      IF (ITRN .GT. 0) THEN
        CALL RDPSRT(ITRN,PROB,IND2,.TRUE.)
        DO 5 I=1,ITRN
        IT=IND2(I)
        IF(IT.LE.0)THEN
          IVAC=IVAC+1
        ELSEIF(PROB(IT).LE.1E-10)THEN
          IVAC=IVAC+1
          IND2(I)=-IT
        ENDIF
    5   CONTINUE
        IF(DEBUG) WRITE (JOSTND,9091) IVAC,ITRN
 9091   FORMAT (/' IN CUTS, TOTALLY DEAD TREES=',I5,'; TOT TREES=',I5)
        IF (IVAC.LE.0) GO TO 6
        CALL TREDEL (IVAC,IND2)
        CALL SPESRT
        IFST=1
        IF (ITRN.LE.0)THEN
C----------
C  CHECK FOR REQUEST OF SALVAGE ACTION FOR THE SPECIAL CASE WHERE ALL
C  TREES IN THE STAND WERE KILLED
C----------
          CALL FMSALV (IY(ICYC),SALVTPA)
          IF ( DEBUG ) THEN
          WRITE (JOSTND,9013) SALVTPA
 9013     FORMAT(' ','IN CUTS, FOLLOWING CALL TO FMSALV',
     &    ' FOR SPECIAL CASE WHERE ALL TREES IN STAND ARE KILLED:',
     &    ' SALVTPA=',F7.2)
          GO TO 1900
          ENDIF
        ENDIF
        IND(1)=0
        CALL RDPSRT(ITRN,DBH,IND,.TRUE.)
    6   CONTINUE
      ENDIF
C----------
C  INITIALIZE REMOVAL SUMMARY ARRAYS AND LOGICAL FLAGS:
C----------
      TPAFAC = 0.0
      DIAMFAC = 0.0
      TSUMD2 = 0.0
      TCLKNT = 0.0
      ASTPAR=0.0
      ASBAR=0.0
      KUTNOW=0
      JPTGRP=0
      JPT=0
      LPDBH=.TRUE.
      LNOAUT=.FALSE.
      LQFA=.FALSE.
      LDELQFA=.FALSE.
      LPTGROUP=.FALSE.
      ISPCUT=0
      DO 10 I=1,7
      ONTREM(I)=0.0
      OCVREM(I)=0.0
      ONTRES(I)=0.0
      OBFREM(I)=0.0
      OMCREM(I)=0.0
      PRMS(I)=0.
   10 CONTINUE
      DO 30 I=1,MAXSP
      DO 20 J=1,3
      SPCRT(I,J)=0.0
      SPCRC(I,J)=0.0
      SPCRES(I,J)=0.0
      SPCBR(I,J)=0.0
      SPCMR(I,J)=0.0
   20 CONTINUE
   30 CONTINUE
C----------
C ZERO OUT THE REMOVED TREES (WK3), SNAG ARRAYS, YARDLOSS ARRAY
C----------
      DO 31 IC=1,MAXTRE
      WK3(IC)=0.
      SSNG(IC)=0.
      DSNG(IC)=0.
      CTCRWN(IC)=0.
      TKCRWN(IC)=0.
      YRDLOS(IC)=0.
   31 CONTINUE
C----------
C  SET YARDLOSS ACTIVE WITH DEFAULTS IF FIRE IS MODEL ACTIVE
C----------
      CALL FMATV(LYARD)
      PRLOST = 0.
      PRDSNG = 0.
      PRCRWN = 1.
C----------
C  IF CHEAPO WAS REQUESTED CALL **ECVOLS**
C----------
      IF (LECON) CALL ECVOLS
C----------
C  CALL ECON EXTENSION ROUTINE TO LOAD ECON RELATED HARVEST/THIN
C  INFORMATION. THIS INFO IS PRE-HARVEST. ALSO CALL ROUTINE TO
C  DETERMINE WHETHER ECON 'PRETEND' HARVEST MODE IS ACTIVE THIS CYCLE.
C  CHECK ECON EXTENSION FOR "PRETEND" MODE - ENTRY IN ECSTATUS
C----------
      CALL GETISPRETENDACTIVE(LPRTND) 
      IF (DEBUG) WRITE (JOSTND,*) 'ECON PRETEND MODE= ',LPRTND
C----------
C  PROCESS SALVAGE CUTS
C----------
      CALL FMSALV (IY(ICYC),SALVTPA)
      IF ( DEBUG ) THEN
         WRITE (JOSTND,9015) SALVTPA
 9015    FORMAT(' ','IN CUTS, FOLLOWING FMSALV CALL: SALVTPA=',F7.2)
      ENDIF
C----------
C  SUPPRESS THINAUTO OPTION IF OTHER THINNINGS ARE SCHEDULED.
C  THIS DOES NOT INCLUDE SETPTHIN OR PRUNING.
C  ACTIVITIES 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
C             234, 235, 236, 237
C----------
      CALL OPFIND(15,MYACTS(7),NTODO)
      IF(NTODO.GT.0) LNOAUT=.TRUE.
C----------
C  CHECK FOR UPDATE OF MINHARV PARAMETERS.
C  ACTIVITY 200
C----------
      CALL OPFIND (1,MYACTS(1),NTODO)
      IF(NTODO.LE.0) GO TO 40
      CALL OPGET (NTODO,4,KDT,IACTK,NP,PRMS)
      IF (IACTK.LT.0) GO TO 40
      CALL OPDONE(NTODO,IY(ICYC))
      CFMIN=PRMS(1)
      BFMIN=PRMS(2)
      BAMIN=PRMS(3)
      TCFMIN=PRMS(4)
   40 CONTINUE
C----------
C  PROCESS MISTLETOE CUTTING PREFERENCE KEYWORD.
C----------
      CALL MISCPF(PRFMIS)
C----------
C  DETERMINE IF THINNING RELATED ACTIVITIES ARE SCHEDULED THIS CYCLE.
C  ACTIVITIES 201,202,203,206,222,223,224,225,226,227,228,229,230,231,232,
C             233,234,235,236,237,248
C----------
      CALL OPFIND (21,MYACTS(2),NTODO)
      IF (DEBUG) WRITE (JOSTND,9020) NTODO,(MYACTS(I),I=2,23)
 9020 FORMAT (' IN CUTS:  NTODO=',I4,'; MYACTS=',21I5)
      IF (NTODO.LE.0) THEN
         TCUT=0.0
         GO TO 1950
      ENDIF
      IF(DEBUG)THEN
        DO 701 I=1,MAXPLT
        IF(PTBAA(I).EQ.0. .AND. PCCF(I).EQ.0. .AND. PTPA(I).EQ.0.)
     &  GO TO 701
        WRITE(JOSTND,*)' I,IPVEC(I),PTBAA,PCCF,PTPA = ',
     &  I,IPVEC(I),PTBAA(I),PCCF(I),PTPA(I)
  701   CONTINUE
      ENDIF
C----------
C  INITIALIZE TRIAL THINNING VECTOR AND CONTROL VARIABLES.
C----------
      IACTK=0
   50 CONTINUE
      IF (ITRN.LE.0) GO TO 100
      DO 90 I=1,ITRN
      WK4(I)=PROB(I)
   90 CONTINUE
  100 CONTINUE
      CFCUT=0.0
      BFCUT=0.0
      BACUT=0.0
      TCUT=0.0
      CMCUT=0.0
      TREES=ONTCUR(7)
      JPNUM = 0
      LPTALL=.FALSE.
C----------
C  BEGIN PROCESSING THINNING OPTIONS.
C----------
      DO 1400 KUT=1,NTODO
      LBELOW=.FALSE.
      LSPECL=.FALSE.
      LBAREA=.FALSE.
      LSDI=.FALSE.
      LQFA=.FALSE.
      DO 101 I=1,7
      PRMS(I)=0.
  101 CONTINUE
C----------
C  BYPASS OPTION ASSIGNMENTS IF AUTOMATIC THINNING IS IN EFFECT.
C  NOTE: THINAUTO ASSIGNED ACTIVITY 221 AFTER 1950 CONTINUE
C----------
      IF(IACTK.EQ.221) GO TO 150
      CALL OPGET (KUT,7,KDT,IACTK,NPS,PRMS)
      IF (DEBUG) WRITE (JOSTND,9030) KDT,IACTK,NPS,(PRMS(I),I=1,NPS)
 9030 FORMAT (' IN CUTS:  KDT=',I5,'; IACTK=',I4,'; NPS=',I2,
     >       '; PRMS=',10F8.2)
      IF (IACTK.LT.0) GO TO 1400
C----------
C  PROCESS SETPTHIN KEYWORD. IF POINT NUMBER IS INVALID, CANCEL
C  KEYWORD REQUEST. IF IT IS VALID, FIND THE FVS 
C  SEQUENTIAL POINT NUMBER FOR FURTHER PROCESSING.
C----------
      IF(IACTK.EQ.248)THEN
        IF(PRMS(1).GE.0)THEN
          JPNUM=IFIX(PRMS(1)+0.5)
        ELSE
          JPNUM=IFIX(PRMS(1)-.5)
        ENDIF
        IF((JPNUM.GT.-.005).AND.(JPNUM.LT..005))THEN
          LPTALL=.TRUE.
          GOTO 12813
        ENDIF
        IF(JPNUM.LT.0)THEN
C
C  SET THE FIRST POINT IN THE POINT GROUP HERE AND CYCLE THROUGH THE
C  OTHER POINTS IN THE POINT GROUP BELOW STATEMENT NO 475
C
          LPTGROUP = .TRUE.
          JPT=1
          JPTGRP=-JPNUM
          JPNUM=IPTGRP(JPTGRP,2)
        ENDIF
        DO IPCHK=1,IPTINV
        IF(ITHNPI .EQ. 1)THEN
          IF(JPNUM .EQ. IPVEC(IPCHK))THEN
            JPNUM=IPCHK
            GO TO 12813
          ENDIF
        ELSE
          IF(JPNUM .LE. IPTINV) GO TO 12813
        ENDIF
        ENDDO
        CALL OPDEL1(KUT)
        GO TO 1400
12813   CONTINUE
        IF(PRMS(1).GE.0.)ITHNPN=IFIX(PRMS(1))
        IF(PRMS(2).GT.0.)ITHNPA=IFIX(PRMS(2))
        CALL OPDONE(KUT,IY(ICYC))
        IF(DEBUG)WRITE(JOSTND,*)' SETPTHIN PROCESSING ITHNPN,ITHNPA,',
     &  'JPNUM,IPTINV= ',ITHNPN,ITHNPA,JPNUM,IPTINV
        GO TO 1400
      ENDIF
C----------
C  RESET THE DATE, SET THE CUTTING FLAG, SET THE CUTTING
C  EFFICIENCY, AND THE TARGET.  IF THE AUTO THIN WAS SPECIFIED,
C  AUTMAX, AUTMIN, AND AUTEFF, ARE IN PRMS(1-3).
C----------
      ICFLAG=IACTK-220
      IF(ICFLAG .NE. 15)JPNUM=0
C----------
C  BRANCH TO END OF THINNING LOOP TO PROCESS SPECPREF OR
C  TCONDMLT REQUESTS.
C----------
      IF(ICFLAG.LE.0) GO TO 1150
C----------
C  BRANCH TO PRUNING SECTION; NOTE: LNOAUT IS .TRUE.
C----------
      IF(ICFLAG.GT.28) GO TO 1950
C----------
C  SAVE THE PARAMETERS FOR THE THINAUTO OPTION.
C----------
      IF (ICFLAG.EQ.2) THEN
        AUTMIN=PRMS(1)
        AUTMAX=PRMS(2)
        AUTEFF=PRMS(3)
        LAUTON=.TRUE.
        CALL OPDONE(KUT,IY(ICYC))
        GO TO 1400
      ENDIF
C----------
C  IF TREE LIST IS EMPTY, CANCEL THE CUTTING OPTION.
C----------
      IF (ITRN.GT.0) GO TO 125
      CALL OPDEL1 (KUT)
      GO TO 1400
C
  125 CONTINUE
      TARGET=PRMS(1)
      IF(TARGET.LT.0.)TARGET=0.
      IF(NPS.GT.1)CUTEFF=PRMS(2)
      STOCK=TREES-TCUT
      GO TO (150,200,200,225,250,275,300,325,300,400,400,325,450,400,
     &       475,400,350),ICFLAG
  150 CONTINUE
      ICFLAG=1
      STOCK=TREES-TCUT
C----------
C  AUTOMATIC THINNING.
C----------
      CUTEFF=AUTEFF
C----------
C  CALL AUTSTK TO CALCULATE FULSTK FOR AUTO THIN.
C  FULSTK IS NORMAL FULL STOCKING IN STEMS PER ACRE.
C----------
      CALL AUTSTK (FULSTK)
C----------
C  THINNING WILL NOT BE EXECUTED IF STOCK IS LESS THAN AUTMAX
C  PERCENT OF NORMAL.
C----------
      REMOVE=0.0
      IF(STOCK.LT.(AUTMAX/100.0)*FULSTK) GO TO 2000
      RSTOCK=(AUTMIN/100.0)*FULSTK
      REMOVE=STOCK-RSTOCK
      IF (REMOVE .LE. 0.) GO TO 2000
      LBELOW=.TRUE.
      IF (DEBUG) WRITE (JOSTND,9040) ICFLAG,STOCK,AUTMIN,AUTMAX,CUTEFF,
     >   FULSTK,RMSQD,REMOVE,RSTOCK,LBELOW
 9040 FORMAT (' ICFLAG  STOCK  AUTMIN  AUTMAX  CUTEFF  FULSTK  RMSQD ',
     >  ' REMOVE  RSTOCK  LBELOW'/1X,I5,8F8.2,L8)
      GO TO 700
C----------
C  SET REMOVE AND RSTOCK FOR OPTIONS THINBTA AND THINATA. IF
C  THINBTA SET LBELOW TRUE.
C  BRANCHING HERE FOR THINAUTO IN COMPUTED "GO TO" WONT HAPPEN
C----------
  200 CONTINUE
      LBELOW=.TRUE.
  225 CONTINUE
      DBHLO=PRMS(3)
      DBHHI=PRMS(4)
      HTLO=PRMS(5)
      HTHI=PRMS(6)
      LPDBH = DBHHI-DBHLO .LE. HTHI-HTLO
      JTYP= 1
      JSPCUT= 0
      CALL CLSSTK(CSTOCK,JTYP,JSPCUT,DBHLO,DBHHI,HTLO,HTHI,0)
      RSTOCK=TARGET
      REMOVE=CSTOCK-RSTOCK
      GO TO 550
C----------
C  SET STOCK, REMOVE, RSTOCK, AND LBAREA FOR OPTIONS THINBBA AND
C  THINABA. IF THINBBA SET LBELOW TRUE.
C----------
  250 CONTINUE
      LBELOW=.TRUE.
  275 CONTINUE
      LBAREA=.TRUE.
      DBHLO=PRMS(3)
      DBHHI=PRMS(4)
      HTLO=PRMS(5)
      HTHI=PRMS(6)
      JTYP= 2
      JSPCUT= 0
      CALL CLSSTK(CSTOCK,JTYP,JSPCUT,DBHLO,DBHHI,HTLO,HTHI,0)
      RSTOCK=TARGET
      REMOVE=CSTOCK-RSTOCK
      GO TO 550
C----------
C  SET LSPECL, REMOVE, AND RSTOCK FOR PRESCRIPTION AND DIAMETER
C  LIMIT AND THINHT THINNINGS. VALMAX AND VALMIN ARE LOADED WITH
C  MAX AND MIN DBH WHEN THINDBH IS CALLED FOR AND THEY ARE LOADED WITH
C  MAX AND MIN HEIGHT WHEN THINHT IS CALLED FOR.
C----------
  300 CONTINUE
C----------
C   THINPRSC OPTION.
C----------
      CUTEFF=PRMS(1)
      RSTOCK=0.0
      REMOVE=99999.0
      LSPECL=.TRUE.
      IF(NPS.GT.1)KUTNOW=IFIX(PRMS(2))
      GO TO 550
  325 CONTINUE
C----------
C   THINDBH, THINHT, AND  OPTIONS.
C----------
      VALMIN=PRMS(1)
      VALMAX=PRMS(2)
      IF(VALMAX .LT.VALMIN) VALMAX=9999.0
      CUTEFF=PRMS(3)
      ISPCUT=INT(PRMS(4))
      CTPA=PRMS(5)
      IF(CTPA.LT.0.)CTPA=0.
      CBA=PRMS(6)
      IF(CBA.LT.0.)CBA=0.
      RSTOCK=0.0
      REMOVE=99999.0
      LSPECL=.TRUE.
      GO TO 355
C----------
C   THINQFA OPTION.
C----------
  350 CONTINUE
      IF(DEBUG)WRITE(JOSTND,*)' PRMS= ',PRMS
      VALMINQFA=PRMS(1)
      VALMAXQFA=PRMS(2)
      ISPCUT=INT(PRMS(3))
      IF(VALMAXQFA .LT.VALMIN) VALMAXQFA=9999.0
      QFAC=PRMS(4)
      DIACW=PRMS(5)
      TARQFA=PRMS(6)
      QFATAR=INT(PRMS(7))
      IF(TARQFA.LT.0.)TARQFA=0.
      IF(DEBUG)WRITE(JOSTND,*)' QFATAR= ',QFATAR
      IF(QFATAR.LE.0)THEN
        CTPA=0.
        CBA=TARQFA
        CSDI=0.
      ELSEIF(QFATAR.LE.1)THEN
        CTPA=TARQFA
        CBA=0.
        CSDI=0.
      ELSEIF(QFATAR.LE.2)THEN
        CTPA=0.
        CBA=0.
        CSDI=TARQFA
        LSDI=.TRUE.
      ENDIF
      CUTEFF=1.
      CUTEF1=CUTEFF
      RSTOCK=0.0
      REMOVE=99999.0
      LSPECL=.TRUE.
      IF(DEBUG)WRITE(JOSTND,*)' ICFLAG,TARQFA,CTPA,CBA,CSDI,QFATAR= ',
     &ICFLAG,TARQFA,CTPA,CBA,CSDI,QFATAR
C----------
C  CALL CUTQFA TO PREPROCESS THE TARGET TPA,BA,SDI DIAMETER LIMIT
C  TARGETS FOR EACH DIAMETER CLASS
C----------
      ICFLAGQFA=ICFLAG
      LZEIDEQFA=LZEIDE
      JOSTND1=JOSTND
      DEBUG1=DEBUG
      CALL CUTQFA(VALMINQFA,VALMAXQFA,ISPCUT,LZEIDEQFA,ICFLAGQFA,
     &            CTPA,CBA,CSDI,QFATAR,QFAC,DIACW,JOSTND1,
     &            DEBUG1,LDELQFA,LQFA)
      IF(LDELQFA)THEN
        LQFA=.FALSE.
        CALL OPDEL1(KUT)
        GO TO 1400
      ENDIF
  352 CONTINUE
C----------
C  RETURN HERE TO PROCESS NEXT DIAMETER CLASS FOR THINQFA KEYWORD
C  CYCQFA IS AN ENTRY IN CUTQFA
C----------
      CALL CYCQFA(VALMIN,VALMAX,CTPA,CBA,CSDI,QFATAR,DIACW,
     &            ICFLAGQFA,JOSTND1,DEBUG1,LQFA)
      IF((ICFLAG.EQ.17).AND.(QFATAR.EQ.2))GOTO 425
C----------
C  COMPUTE TOTAL REMOVAL AND CUTTING EFFICIENCY FOR A DIAMETER-
C  SPECIES CLASS WHEN RESIDUAL TPA OR BA IS SPECIFIED FOR THE CLASS.
C  CTPA AND CBA ARE SET TO .GE. 0 IN INITRE; CBA IS ALSO SET TO 0
C  WHEN CTPA GT 0.
C----------
  355 CONTINUE
      IF(CTPA.EQ.0.0 .AND. CBA.EQ.0.0) GO TO 360
      CSTOCK=0.0
      JTYP=1
      IF(CBA.GT.0.)JTYP=2
      IF ((ICFLAG.EQ.8).OR.((ICFLAG.EQ.17).AND.(QFATAR.LE.1))) THEN
        CALL CLSSTK(CSTOCK,JTYP,ISPCUT,VALMIN,VALMAX,0.,999.,0)
      ELSEIF (ICFLAG.EQ.12) THEN
        CALL CLSSTK(CSTOCK,JTYP,ISPCUT,0.,999.,VALMIN,VALMAX,0)
      ENDIF
      IF(CSTOCK.LE.0.0) GO TO 360
      RSTOCK=CTPA+CBA
      REMOVE=CSTOCK-RSTOCK
      IF(CBA.GT.0.0) LBAREA=.TRUE.
      CUTEFF=REMOVE/CSTOCK
      IF (CUTEFF.GT.1.0) CUTEFF=1.0
      IF(ICFLAG.EQ.17)GO TO 360
C----------
C  RESET THE STORED PARAMETERS FOR CUTEFF.
C----------
      PRMS(3)=MAX(0.0,CUTEFF)
      CALL OPCHPR (KUT,6,PRMS)
 360  CONTINUE
      IF (DEBUG) WRITE(JOSTND,9050) CTPA,CBA
 9050 FORMAT(' IN CUTS: CTPA=',F8.2,' CBA=',F8.2)
      GO TO 550
C----------
C   THINSDI  OPTION (ICFLAG=10)
C   THINCC   OPTION (ICFLAG=11)
C   THINRDEN OPTION (ICFLAG=14)
C   THINPT   OPTION (ICFLAG=15)
C   THINRDSL OPTION (ICFLAG=16)
C   THINQFA- OPTION (ICFLAG=17)
C----------
  400 CONTINUE
C----------
      IF(DEBUG)WRITE(JOSTND,*)' AFTER STATEMENT 400-JPNUM= ',JPNUM
C----------
C  IF THIS IS A THINRDSL AND THE SILVAH FOREST TYPE IS NOT ONE WHERE THE
C  SILVAH RELATIVE DENSITY IS VALID, THEN CANCEL THE THINNING.
C  IF THIS IS A POINT THINNING TO A SILVAH RD TARGET AND THE FOREST TYPE
C  IS NOT A DEFINED SILVAH FOREST TYPE, THEN CANCEL THE THINNING.
C----------
      IF((ICFLAG.EQ.16 .AND. ISILFT.EQ.0) .OR. (ICFLAG.EQ.15 .AND.
     &    ITHNPA.EQ.6 .AND. ISILFT.EQ.0)) THEN
        CALL OPDEL1(KUT)
        GO TO 1400
      ENDIF
C----------
      CSDI = PRMS(1)
      IF(CSDI.LT.0.)CSDI=0.
      CUTEF1 = PRMS(2)
      ISPCUT = INT(PRMS(3))
      VALMIN = PRMS(4)
      DBHLO = PRMS(4)
      VALMAX = PRMS(5)
      DBHHI = PRMS(5)
      ICUT = INT(PRMS(6))
      HTLO = 0.
      HTHI = 999.
      RSTOCK = 0.
      REMOVE = 99999.
      LSDI = .TRUE.
      LPDBH = .TRUE.
      LSPECL = .TRUE.
      IF(ICUT .GT. 0) LSPECL = .FALSE.
      IF(ICUT .EQ. 1) LBELOW = .TRUE.
  425 CONTINUE
C
C  IF CLASS RESIDUAL TARGET IS GREATER THAN ZERO, DETERMINE CURRENT 
C  STOCKING IN THE CLASS.
C
      IF(CSDI .GT. 0.) THEN
        IF(ICFLAG.EQ.10 .OR. (ICFLAG.EQ.15 .AND. ITHNPA.EQ.3)
     &     .OR.((ICFLAG.EQ.17).AND.(QFATAR.EQ.2)))THEN
          CALL SDICLS(ISPCUT,VALMIN,VALMAX,2,SDIC,ZSDI,
     &                STAGEA,STAGEB,JPNUM)
          IF(LZEIDE)SDIC=ZSDI
        ELSEIF(ICFLAG.EQ.11 .OR. (ICFLAG.EQ.15 .AND. ITHNPA.EQ.4))THEN
          IF (CSDI.LT.100.)THEN
            CSDI=(43560.0*ALOG(1.0-(CSDI/100.))/0.785398)*(-1.0)
            CALL CCCLS(ISPCUT,VALMIN,VALMAX,2,SDIC,JPNUM)
          ELSE
            CALL OPDEL1(KUT)
            GOTO 1400
          ENDIF
        ELSEIF(ICFLAG.EQ.14 .OR. (ICFLAG.EQ.15 .AND. ITHNPA.EQ.5))THEN
          CALL RDCLS(ISPCUT,VALMIN,VALMAX,2,SUMD2,CLKNT,SDIC,JPNUM,
     &               TPAFAC,DIAMFAC)
          TSUMD2 = SUMD2
          TCLKNT = CLKNT
        ELSEIF(ICFLAG.EQ.16 .OR. (ICFLAG.EQ.15 .AND. ITHNPA.EQ.6))THEN
          CALL RDCLS2(ISPCUT,VALMIN,VALMAX,2,SDIC,JPNUM)
        ELSEIF(ICFLAG.EQ.15 .AND. ITHNPA.EQ.1)THEN
          CALL CLSSTK(SDIC,1,ISPCUT,VALMIN,VALMAX,0.,999.,JPNUM)
        ELSEIF(ICFLAG.EQ.15 .AND. ITHNPA.EQ.2)THEN
          CALL CLSSTK(SDIC,2,ISPCUT,VALMIN,VALMAX,0.,999.,JPNUM)
          LBAREA=.TRUE.
        ENDIF
        IF(DEBUG)WRITE(JOSTND,*)'ISPCUT,VALMIN,VALMAX,SDIC,CSDI,ICFLAG',
     &  ' JPNUM= ',ISPCUT,VALMIN,VALMAX,SDIC,CSDI,ICFLAG,JPNUM
        IF(DEBUG)WRITE(JOSTND,*)' CUTEFF, CUTEF1= ',CUTEFF, CUTEF1  
C
C  IF CURRENT STOCKING EXCEEDS THE TARGET, SET TARGET RESIDUAL STOCKING,
C  AMOUNT TO REMOVE, AND CUTTING EFFICIENCY.
C
        IF(SDIC .GT. CSDI) THEN
          IF (ICFLAG.EQ.11) THEN
          	CCC=1
          	IF(CCCOEF.NE.1)CCC=CCCOEF
          	IF(CCCOEF2.NE.1)CCC=CCCOEF2
C Uncorrected PCC for the given target PCC
            CCCLC1 = 100.0*CSDI*0.785398/43560.
C Corrected PCC adjusted using target PCC and CCC
            CCCLC21 = 100.0*(1.0-EXP(-(CCC/100)*CCCLC1))
            IF(CCCLC21.GT.CCCLC1)CCCLC21=CCCLC1
C Corrected PCC adjusted using target PCC and CCC assuming random            
            CCT=(100.0*(1.0-EXP(-0.01*(100.0*CSDI*0.785398/43560.))))
C Uncorrected PCC required to reach target using CCC
            CCCSDI = ((ALOG(1+(-CCT/100)))/(CCC/100)*(-1))
C Crown area difference between the adjusted and unadjusted
            CRADIF = ABS((((CCCSDI/100)/0.785398)*43560)-CSDI)
            IF(DEBUG)WRITE(JOSTND,*) 'CCC,CCCLC21,CCT,CCCSDI=',
     >         CCCOEF,CCCLC21,CCT,CCCSDI
            IF(CCC.LT.1)THEN
                RSTOCK = CSDI+CRADIF
                REMOVE = SDIC-RSTOCK
            ELSEIF(CCC.GT.1)THEN 
                RSTOCK = CSDI-CRADIF
                REMOVE = SDIC-RSTOCK
            ELSE
              RSTOCK = CSDI
              REMOVE = SDIC-CSDI
            ENDIF   
          ELSE  
            RSTOCK = CSDI
            REMOVE = SDIC-CSDI
       ENDIF 

       IF(DEBUG)WRITE(JOSTND,*)' RSTOCK,REMOVE,ICUT,CCCDIF,
     &   CCCLC1=', RSTOCK,REMOVE,ICUT,CCCDIF,CCCLC1
          CUTEFF = REMOVE/SDIC
          IF(CUTEFF .GT. 1.) CUTEFF=1.
          IF(CUTEF1 .LT. CUTEFF)THEN
            PRMS(2)=MAX(0.,CUTEFF)
            CALL OPCHPR(KUT,6,PRMS)
          ELSE
            IF(ICUT.GT.0)CUTEFF = CUTEF1
          ENDIF
        ELSE
          REMOVE = 0.
        ENDIF
C
C  IF CLASS RESIDUAL TARGET IS ZERO, THEN SET TARGET RESIDUAL STOCKING 
C  TO ZERO, SET AMOUNT TO REMOVE TO THE CURRENT STOCKING IN THE CLASS,
C  AND SET THE CUTTING EFFICIENCY TO 1. 
C
      ELSE
        IF(ICFLAG.EQ.10 .OR. (ICFLAG.EQ.15 .AND. ITHNPA.EQ.3)
     &     .OR.((ICFLAG.EQ.17).AND.(QFATAR.EQ.2)))THEN
          CALL SDICLS(ISPCUT,VALMIN,VALMAX,2,SDIC,ZSDI,
     &                STAGEA,STAGEB,JPNUM)
          IF(LZEIDE)SDIC=ZSDI
        ELSEIF(ICFLAG.EQ.11 .OR. (ICFLAG.EQ.15 .AND. ITHNPA.EQ.4))THEN
          CALL CCCLS(ISPCUT,VALMIN,VALMAX,2,SDIC,JPNUM)
        ELSEIF(ICFLAG.EQ.14 .OR. (ICFLAG.EQ.15 .AND. ITHNPA.EQ.5))THEN
          CALL RDCLS(ISPCUT,VALMIN,VALMAX,2,SUMD2,CLKNT,SDIC,JPNUM,
     &               TPAFAC,DIAMFAC)
          TSUMD2 = SUMD2
          TCLKNT = CLKNT
        ELSEIF(ICFLAG.EQ.16 .OR. (ICFLAG.EQ.15 .AND. ITHNPA.EQ.6))THEN
          CALL RDCLS2(ISPCUT,VALMIN,VALMAX,2,SDIC,JPNUM)
        ELSEIF(ICFLAG.EQ.15 .AND. ITHNPA.EQ.1)THEN
          CALL CLSSTK(SDIC,1,ISPCUT,VALMIN,VALMAX,0.,999.,JPNUM)
        ELSEIF(ICFLAG.EQ.15 .AND. ITHNPA.EQ.2)THEN
          CALL CLSSTK(SDIC,2,ISPCUT,VALMIN,VALMAX,0.,999.,JPNUM)
          LBAREA=.TRUE.
        ENDIF
        REMOVE = SDIC
        RSTOCK = 0.
        CUTEFF = 1.
      ENDIF
      IF(DEBUG)WRITE(JOSTND,*)' CUTTING EFFICIENCY =',CUTEFF
      GO TO 550
C----------
C   THINMIST OPTION (ICFLAG=12)
C----------
  450 CONTINUE
      IDMCUT=IFIX(PRMS(1))
      DBHLO=PRMS(2)
      DBHHI=PRMS(3)
      IF(DBHHI .LT.DBHLO) DBHHI=9999.0
      CUTEFF=PRMS(4)
      RSTOCK=0.0
      REMOVE=99999.0
      LSPECL=.TRUE.
      GO TO 550
C----------
C   THINPT OPTION (ICFLAG=15)
C----------
  475 CONTINUE
C
C  IF THE POINT NUMBER OR THINNING ATTRIBUTE HAS NOT BEEN ENTERED,
C  CANCEL THE REQUEST.
C
      IF(((ITHNPN.EQ.0).AND.(.NOT.LPTALL)).OR.(ITHNPA.EQ.0))THEN
        CALL OPDEL1(KUT)
        GOTO 1400
      ENDIF
C
C PROCESS THE THINPT REQUEST:
C
      IF(ITHNPA .LE. 7)THEN
        IF(LPTALL)THEN
          JPNUM=JPNUM+1
          GO TO 400
        ELSEIF(LPTGROUP.AND.(JPT.LE.IPTGRP(JPTGRP,1)))THEN
          JPT=JPT+1
          JPNUM=IPTGRP(JPTGRP,JPT)
          IF(ITHNPI .EQ. 1)THEN
            DO IPCHK=1,IPTINV
            IF(JPNUM .EQ. IPVEC(IPCHK))THEN
              JPNUM=IPCHK
              GO TO 400
            ENDIF
            ENDDO
          ELSEIF(JPNUM.LE.IPTINV)THEN
            GOTO 400
          ENDIF
        ELSE
          GOTO 400
        ENDIF
      ELSE
        CALL OPDEL1(KUT)
        GO TO 1400
      ENDIF
C 500 CONTINUE
C----------
C   ** FREE SPOT **
C----------
C     REMOVE=0.0
C----------
C  WRITE DEBUG OUTPUT IF DESIRED.
C----------
  550 CONTINUE
      IF(.NOT.DEBUG) GO TO 600
      WRITE(JOSTND,9060) ICYC,ICFLAG,STOCK,RSTOCK,REMOVE,LBAREA,
     &         LBELOW,LSPECL,KUTNOW,JPNUM
 9060 FORMAT(' IN CUTS, CYCLE=',I3,' ICFLAG=',I2,' STOCK=',F8.1,
     &       ' RSTOCK=',F8.1,' REMOVE=',F8.1,' LBAREA=',L1,
     &       ' LBELOW=',L1,' LSPECL=',L1,' KUTNOW=',I2,' JPNUM=',I5)
  600 CONTINUE
C----------
C IF REMOVE LESS THAN OR EQUAL TO 0.0, DELETE AND PROCESS THE NEXT.
C----------
      IF((REMOVE.GT.0.0).OR.(LPTALL.AND.(JPNUM.LT.IPTINV)))GO TO 650
      IF(LPTGROUP)THEN
        IF(JPT.LT.IPTGRP(JPTGRP,1))GO TO 650
      ENDIF    
      CALL OPDEL1(KUT)
      GO TO 1400
  650 CONTINUE
C------------
C  SET THE CUTTING OPTION STATUS TO ACCOMPLISHED.  IF THE MIN.
C  HARVEST RESULTS IN THE TOTAL CUT NOT BEING ACCOMPLISHED, THEN
C  THE STATUS IS RESET TO 'DELETED'.
C-----------
      CALL OPDONE(KUT,IY(ICYC))
  700 CONTINUE
C----------
C  LOAD ARRAY WK2 WITH PRIORITIES FOR REMOVAL.
C----------
      DO 850 I=1,ITRN
      IS=ISP(I)
      D=DBH(I)
      IP=ITRE(I)
      V=D
      IF (ICFLAG .EQ. 12) V=HT(I)
      LNOCUT(I)=.FALSE.
C----------
C  SET LINCL
C----------
      LINCL = .FALSE.
      IF(JPNUM.GT.0 .AND. ITRE(I).NE.JPNUM)GO TO 710
      IF((ISPCUT.EQ.0 .OR. ISPCUT.EQ.ISP(I)).AND..NOT.LEAVESP(IS))THEN
        LINCL = .TRUE.
      ELSEIF(ISPCUT.LT.0)THEN
        IGRP = -ISPCUT
        IULIM = ISPGRP(IGRP,1)+1
        DO 705 IG=2,IULIM
        IF((IS .EQ. ISPGRP(IGRP,IG)).AND..NOT.LEAVESP(IS))THEN
          LINCL = .TRUE.
          GO TO 710
        ENDIF
  705   CONTINUE
      ENDIF
  710 CONTINUE
C----------
C  GET MISTLETOE RATING FOR CURRENT TREE RECORD.
C----------
      CALL MISGET(I,IDMR)
C----------
C  SET REMOVAL PRIORITY FOR THINMIST REQUESTS
C----------
      IF(ICFLAG.EQ.13)THEN
        LNOCUT(I)=D.LT.DBHLO.OR.D.GE.DBHHI .OR.
     >            (IDMR.NE.IDMCUT .AND. IDMCUT.NE.0) .OR.
     >            IDMR.EQ.0
        WK2(I)=1.0
        IF(LNOCUT(I))WK2(I)=0.0
        GO TO 850
      ENDIF
C----------
C  GO TO STATEMENT 750 TO PROCESS PRESCRIPTIONS AND DIAMETER LIMIT
C  THINNINGS.
C----------
      IF(LSPECL) GO TO 750
C----------
C  IF THINNING FROM BELOW, REVERSE THE SIGN OF THE TREE SIZE TERM
C  IN THE THINNING PRIORITY FORMULA.
C----------
      IF (LPDBH) THEN
        XSZ=DBH(I)
      ELSE
        XSZ=HT(I)
      ENDIF
      IF (LBELOW) XSZ=-XSZ
      WK2(I)=XSZ + IORDER(IS) + TCWT * IMC(I) + SPCLWT*ISPECL(I)
     &       + PBAWT*PTBAA(IP) + PCCFWT*PCCF(IP) + PTPAWT*PTPA(IP)
      IF(DEBUG)WRITE(JOSTND,*)' I,WK2,XSZ,IORDER,IS,TCWT,IMC,SPCLWT,',
     &'ISPECL,IP,PBAWT,PTBAA,PCCFWT,PCCF,PTPAWT,PTPA= ',I,WK2(I),XSZ,
     &IORDER(IS),IS,TCWT,IMC(I),SPCLWT,ISPECL(I),IP,PBAWT,PTBAA(IP),
     &PCCFWT,PCCF(IP),PTPAWT,PTPA(IP)
      IF(IDMR.GT.0) WK2(I)=WK2(I)+PRFMIS(IS,IDMR)
C
      IF(ICFLAG.EQ.1) GO TO 850
      LNOCUT(I)=DBH(I).LT.DBHLO.OR.DBH(I).GE.DBHHI .OR.
     >          HT (I).LT.HTLO .OR.HT (I).GE.HTHI
C
C  IF THINNING BY SDI, CC, RDEN, RDSL, OR PT, AND THE TREE IS NOT OF THE 
C  RIGHT SPECIES OR ON THE RIGHT POINT, FLAG TREE AS A NO CUT TREE.
C
      IF((ICFLAG.EQ.10 .OR. ICFLAG.EQ.11 .OR. ICFLAG.EQ.14 .OR. 
     >   ICFLAG.EQ.15 .OR. ICFLAG.EQ.16 .OR. ((ICFLAG.EQ.17).AND.
     >   (QFATAR.EQ.2))).AND. .NOT.LINCL)
     >   LNOCUT(I)=.TRUE.
C
C  IF THINING BY BA OR TPA, AND THE TREE IS DESIGNATATED AS A LEAVE
C  SPECIES, FLAG TREE AS A NO CUT TREE
C
      IF(LEAVESP(IS))LNOCUT(I)=.TRUE.
C
      IF(DEBUG)WRITE(JOSTND,*)' I,WK2(),LNOCUT()= ',I,WK2(I),LNOCUT(I)
      GO TO 850
  750 CONTINUE
      WK2(I)=1.0
      IF(ICFLAG.EQ.8 .OR. ICFLAG.EQ.12 .OR. ((ICFLAG.EQ.17).AND.
     &(QFATAR.LE.1))) GO TO 800
      IF(LSDI) GO TO 800
C----------
C  THINNING PRIORITY FROM PRESCRIPTION. NPS IS THE NUMBER OF
C  PARAMETERS SPECIFIED IN THE THINPRSC KEYWORD.  IF NPS IS 2
C  THEN CHECK KUTKOD FOR VALUES EQUAL TO KUTNOW.  IF NPS IS 1
C  THEN CHECK KUTKOD FOR VALUES GREATER OR EQUAL TO 2.
C----------
      IF(NPS.EQ.1) THEN
        IF(KUTKOD(I).LT.2) WK2(I)=0.0
      ELSE
        IF(KUTNOW.NE.KUTKOD(I)) WK2(I)=0.0
      ENDIF
      GO TO 850
C----------
C  DIAMETER LIMIT OR HEIGHT LIMIT THINNING.
C----------
  800 CONTINUE
      IF(V.LT.VALMIN.OR.V.GE.VALMAX) WK2(I)=0.0
      IF(.NOT.LINCL) WK2(I)=0.0
  850 CONTINUE
C----------
C  SORT REMOVAL PRIORITY ARRAY IN DESCENDING ORDER.  THE ARRAY IND2
C  CONTAINS THE SUBSCRIPTS TO THE SORTED ORDER.  BYPASS THE SORT
C  IF LSPECL IS TRUE.
C----------
      IF(LSPECL) GO TO 900
      IF (ITRN .GT. 0) CALL RDPSRT(ITRN,WK2,IND2,.TRUE.)
  900 CONTINUE
C----------
C  LOOP THROUGH THE TREE LIST TO COMPUTE TRIAL THINNING STATISTICS.
C  ADJUSTED PROBS ARE STORED IN THE VECTOR WK4 UNTIL ALL
C  SCHEDULED THINNINGS ARE COMPLETE.  QUANTITIES OF BF VOLUME,
C  CF VOLUME, AND BASAL AREA REMOVED PER ACRE ARE ACCUMULATED ACROSS
C  ALL THINNINGS TO TEST FOR OVERALL COMPLIANCE WITH MINIMUM HARVEST
C  STANDARDS.
C----------
      TOTCUT=0.0
      THIS=0.0
      XLEFT=999999.
      DO 1100 I=1,ITRN
C----------
C    IT -- SUBSCRIPT TO RECORD WITH NEXT HIGHEST PRIORITY FOR
C          REMOVAL.  IF LSPECL IS TRUE, IT IS EQUAL TO I.  IF
C          LSPECL IS FALSE, IT IS EQUAL TO IND2(I).
C  PREM -- NUMBER OF TREES PER ACRE REMOVED BY THINNING TREE IT.
C   CUT -- STOCKING REMOVED BY THINNING TREE IT, STATED IN THE
C          APPROPRIATE UNITS (BASAL AREA OR TREES PER ACRE).
C  DMAX -- DIAMETER OF LARGEST TREE RECORD FOR WHICH SOME PORTION
C          WAS REMOVED.
C----------
      IT=IND2(I)
      IF (.NOT.LSPECL) GO TO 950
      IT=I
      IND2(I)=I
  950 CONTINUE
      D=DBH(IT)
      XMORE=0.
C----------
C  IF REMOVE-TOTCUT IS LESS THAN OR EQUAL TO ZERO, THINNING IS COMPLETE.
C  ZERO OUT WK2 FOR REMAINING TREES. THE GNU SOFTWARE LEAVES REDSIDUAL DIGITS
C  AT THE 7TH DECIMALL PLACE. THIS CAUSED TEH XLEFT VARIABLE TO TO HAVE 
C  AN INCORRECT NON-ZERO VALUE IN SOME CASES PROCESSING THE THINRDSL KEYWORD,
C  AND ABRANCH TO STAEMENT 1000 BELOW WHEN THE THE CUT CARIABLE WAS ZERO.
C  THIS CAUSED A NUMERICAL ERROR EVALUATING PREM BELOW STATEMANT 1046.
C  WE NOW REQUIRE XLEFT TO BE GREATER THAN .0005, RATHER THAN ZERO, TO
C  PROCEED WITH CUTTING. TREES WITH A RESIDUAL OF LE .0005 AFTER CUTTING
C  ARE DELETED FROM THE TREE LIST BELOW STAEMENT 1500.
C  
C----------
      IF(DEBUG)WRITE(JOSTND,*)' LSDI,ICFLAG,XLEFT,REMOVE,TOTCUT= ',
     &LSDI,ICFLAG,XLEFT,REMOVE,TOTCUT
C
      IF(LSDI.AND.((ICFLAG.EQ.10 .OR. ICFLAG.EQ.14 .OR. ICFLAG.EQ.16
     & .OR. ((ICFLAG.EQ.17).AND.(QFATAR.EQ.2))
     & .OR. ((ICFLAG.EQ.15) .AND. (ITHNPA.EQ.3))
     & .OR. ITHNPA.EQ.5 .OR. ITHNPA.EQ.6)))THEN
        IF(XLEFT .GT. .0005)GO TO 1000
      ELSE
        IF(REMOVE-TOTCUT.GT.0.0) GO TO 1000
      ENDIF
      WK2(IT)=0.0
      GO TO 1100
C----------
C  BRANCH TO END OF LOOP IF LNOCUT IS TRUE OR IF WK2(IT)=0
C  AND LSPECL IS TRUE.
C----------
 1000 IF(WK2(IT).LE.0.0.AND.LSPECL) GO TO 1100
      IF(LNOCUT(IT)) GO TO 1100
C----------
C  DETERMINE THE AMOUNT OF EACH TREE CUT AND COLLECT REMOVAL
C  SUMMARY INFORMATION.
C----------
      PREM=WK4(IT)*CUTEFF
      IF (PREM.GT.WK4(IT)) PREM=WK4(IT)
      IF (PREM.LE.0.0) GO TO 1100
      CUT=PREM
      IF(LBAREA) CUT=PREM*D*D*0.005454154
      IF(ICFLAG.EQ.15 .AND. (ITHNPA.EQ.1 .OR. ITHNPA.EQ.2))
     & CUT=CUT*(PI-FLOAT(NONSTK))
      XLEFT=REMOVE-(TOTCUT+CUT)
      IF(LSDI) THEN
        IF(ICFLAG.EQ.10 .OR. ((ICFLAG.EQ.17).AND.(QFATAR.EQ.2))
     &   .OR. (ICFLAG.EQ.15 .AND.ITHNPA.EQ.3))THEN
          CALL SDICLS(ISPCUT,VALMIN,VALMAX,2,SDIC,ZSDI,
     &                STAGEA,STAGEB,JPNUM)
          IF(LZEIDE)SDIC=ZSDI
          IF(DEBUG)WRITE(JOSTND,*)' SDI THINNING, TREE= ',IT,' DBH= ',
     &    D,' RANGE= ',VALMIN,VALMAX,' WK4= ',WK4(IT),' CUTEFF= ',
     &    CUTEFF,' PREM= ',PREM,' EXISTING SDI IN CLASS= ',SDIC,
     &    ' PARAMETERS= ',STAGEA,STAGEB 
          CUT=PREM*(STAGEA+STAGEB*D*D)
          IF(LZEIDE)CUT=PREM*(D/10.)**1.605
          IF(ICFLAG.EQ.15 .AND. ITHNPA.EQ.3)CUT=CUT*(PI-FLOAT(NONSTK))
          XLEFT = SDIC-(CSDI+CUT)
        ELSEIF(ICFLAG.EQ.11 .OR. (ICFLAG.EQ.15 .AND. ITHNPA.EQ.4))THEN
          CWDI = CRWDTH(IT)
          CUT=PREM*CWDI*CWDI
          IF(ICFLAG.EQ.15 .AND. ITHNPA.EQ.4)CUT=CUT*(PI-FLOAT(NONSTK))
          XLEFT=REMOVE-(TOTCUT+CUT)
        ELSEIF(ICFLAG.EQ.14 .OR. (ICFLAG.EQ.15 .AND. ITHNPA.EQ.5))THEN
          TEMP=TSUMD2-PREM*DBH(IT)*DBH(IT)
          CUT=SDIC-(TEMP*0.0054542)/(TEMP/(TCLKNT-PREM))**0.25
          IF(ICFLAG.EQ.15 .AND. ITHNPA.EQ.5)CUT=CUT*(PI-FLOAT(NONSTK))
          XLEFT = SDIC-(CSDI+CUT)
        ELSEIF(ICFLAG.EQ.16 .OR. (ICFLAG.EQ.15 .AND. ITHNPA.EQ.6))THEN
          CALL RDSLTR(ISP(IT),IT,TREERD)
          CUT=PREM*TREERD
          IF(ICFLAG.EQ.15 .AND. ITHNPA.EQ.6)CUT=CUT*(PI-FLOAT(NONSTK))
          IF(DEBUG)WRITE(JOSTND,*)' CUT,PI,PREM,TREERD= ',
     &    CUT,PI,PREM,TREERD     
          XLEFT=REMOVE-(TOTCUT+CUT)         
        ENDIF
      ENDIF
      IF(DEBUG)WRITE(JOSTND,*)' IT,WK4,CUTEFF,PREM,REMOVE,TOTCUT,CUT,',
     &'XLEFT= ',IT,WK4(IT),CUTEFF,PREM,REMOVE,TOTCUT,CUT,XLEFT
      IF(LSDI .AND. (ICFLAG.EQ.10 .OR. ICFLAG.EQ.14 .OR. ICFLAG.EQ.16
     &.OR. ((ICFLAG.EQ.17).AND.(QFATAR.EQ.2)) .OR. (ICFLAG.EQ.15 .AND.
     &(ITHNPA.EQ.3 .OR.ITHNPA.EQ.5 .OR. ITHNPA.EQ.6))))THEN
        XMORE=SDIC-CSDI
        IF((ICFLAG.EQ.16).OR.(ICFLAG.EQ.15.AND.ITHNPA.EQ.6))
     &     XMORE=REMOVE-TOTCUT
        IF(DEBUG)WRITE(JOSTND,*)' IT,SDIC,CSDI,XMORE= ',
     &  IT,SDIC,CSDI,XMORE
        IF(XMORE.GT.CUT)GO TO 1050
        GO TO 955
      ENDIF
      IF(XLEFT.GE.0.0) GO TO 1050
C----------
C  THIS IS THE LAST TREE TO REMOVE.
C  THINSDI OR THINRDEN PREM NEEDS TO BE DETERMINED ITERATIVELY
C----------
  955 CONTINUE
      IF(LSDI.AND.(ICFLAG.EQ.10.OR.((ICFLAG.EQ.17).AND.(QFATAR.EQ.2))
     &    .OR.(ICFLAG.EQ.15 .AND. ITHNPA.EQ.3)))THEN
        PREM=XMORE/(STAGEA+STAGEB*D*D)
        IF(LZEIDE)PREM=XMORE/(D/10)**1.605
        IF(PREM .GT. WK4(IT))PREM=WK4(IT)
        IF(DEBUG)WRITE(JOSTND,*)' IT,D,XMORE,CUT,STAGEA,STAGEB,EST PRE',
     &  'M= ',IT,D,XMORE,CUT,STAGEA,STAGEB,PREM  
        IPOS=0
        INEG=0
        ORGWK4=WK4(IT)
 1045   CONTINUE
        IF(IPOS.GT.0 .AND. INEG.GT.0)GO TO 1046
        WK4(IT)=ORGWK4-PREM
        CALL SDICLS(ISPCUT,VALMIN,VALMAX,2,SDIC,ZSDI,
     &              STAGEA,STAGEB,JPNUM)
        IF(LZEIDE)SDIC=ZSDI
        DIFF=SDIC-CSDI
        IF(DEBUG)WRITE(JOSTND,*)' ITERATIVE THINSDI IT,SDIC WITH EST PR'
     &  ,'EM,CSDI,DIFF,',
     &  'PREM,ORGWK4,WK4,STAGEA,STAGEB,IPOS,INEG,JPNUM= ',
     &  IT,SDIC,CSDI,DIFF,PREM,ORGWK4,WK4(IT),STAGEA,STAGEB,IPOS,INEG,
     &  JPNUM
        IF(ABS(DIFF).GT.0.5)THEN
          IF(DIFF.LT.0.)THEN
            PREM=PREM-0.05
            INEG=1
            GO TO 1045
          ELSE
            PREM=PREM+0.05
            IPOS=1
            GO TO 1045
          ENDIF
        ENDIF
 1046   CONTINUE
        WK4(IT)=ORGWK4
      ELSEIF(LSDI .AND. (ICFLAG.EQ.14 .OR. ICFLAG.EQ.16 .OR.
     &                  (ICFLAG.EQ.15 .AND. ITHNPA.EQ.5).OR.
     &                  (ICFLAG.EQ.15 .AND. ITHNPA.EQ.6)))THEN
        IF(DEBUG)WRITE(JOSTND,*)' IT,D,XMORE,CUT,PREM= ',
     &  IT,D,XMORE,CUT,PREM  
        PREM=(XMORE/CUT)*PREM
        IF(PREM .GT. WK4(IT))PREM=WK4(IT)
        IPOS=0
        INEG=0
        ORGWK4=WK4(IT)
 1047   CONTINUE
        IF(IPOS.GT.0 .AND. INEG.GT.0)GO TO 1048
        WK4(IT)=ORGWK4-PREM
        IF((ICFLAG.EQ.14).OR.(ICFLAG.EQ.15 .AND. ITHNPA.EQ.5))THEN
          CALL RDCLS(ISPCUT,VALMIN,VALMAX,2,SUMD2,CLKNT,SDIC,JPNUM,
     &               TPAFAC,DIAMFAC)
        ELSE
          CALL RDCLS2(ISPCUT,VALMIN,VALMAX,2,SDIC,JPNUM)
        ENDIF
        DIFF=SDIC-CSDI
        IF(DEBUG)WRITE(JOSTND,*)' ITERATIVE THINRDEN IT,SDIC WITH EST P'
     &  ,'REM,CSDI,DIFF,',
     &  'PREM,ORGWK4,WK4,IPOS,INEG,JPNUM= ',
     &  IT,SDIC,CSDI,DIFF,PREM,ORGWK4,WK4(IT),IPOS,INEG,JPNUM
        IF(ABS(DIFF).GT.0.01)THEN
          IF(DIFF.LT.0.)THEN
            PREM=PREM-0.2
            INEG=1
            GO TO 1047
          ELSE
            PREM=PREM+0.2
            IPOS=1
            GO TO 1047
          ENDIF
        ENDIF
 1048   CONTINUE
        WK4(IT)=ORGWK4
      ELSE
        PREM=((XLEFT+CUT)/CUT)*PREM
      ENDIF
      CUT=REMOVE-TOTCUT
C----------
C  INCREMENT THE VALUE OF TCUT.
C----------
 1050 TOTCUT=TOTCUT+CUT
      TSUMD2=TSUMD2-PREM*DBH(IT)*DBH(IT)
      TCLKNT=TCLKNT-PREM
      IF(DEBUG)WRITE(JOSTND,*)'IT,CUT,TOTCUT,TSUMD2,TCLKNT= ',
     &IT,CUT,TOTCUT,TSUMD2,TCLKNT
C----------
C  IF YARDING LOSSES ARE BEING ACCOUNTED FOR, SOME OF THE
C  CUT IS PLACED IN SEPARATE POOLS AND DOES
C  NOT BECOME PART OF THE USUAL REMOVAL STATISTICS.
C----------
      IF (LYARD) THEN
        LOSS = PREM * PRLOST
        DSNG(IT)=DSNG(IT) + LOSS * PRDSNG
        SSNG(IT)=SSNG(IT) + LOSS * (1.0 - PRDSNG)
        CTCRWN(IT)=CTCRWN(IT) + (PRCRWN * (PREM - LOSS)) +
     >             (LOSS * PRDSNG)
        TKCRWN(IT)=TKCRWN(IT) + ((1.0 - PRCRWN) * (PREM - LOSS))
      ELSE
        CTCRWN(IT)=CTCRWN(IT) + PREM
      ENDIF
      WK4(IT)=WK4(IT)-PREM
      YRDLOS(IT)=YRDLOS(IT)+PREM*PRLOST
      IF(VVER(:2).EQ.'CS' .OR. VVER(:2).EQ.'LS' .OR.
     &   VVER(:2).EQ.'NE' .OR. VVER(:2).EQ.'SE' .OR.
     &   VVER(:2).EQ.'SN') THEN
        CFCUT=CFCUT+PREM*(1.-PRLOST)*CFV(IT)
      ELSE
        CFCUT=CFCUT+PREM*CFV(IT)
      ENDIF
      CMCUT=CMCUT+PREM*(1.-PRLOST)*WK1(IT)
      BFCUT=BFCUT+PREM*(1.-PRLOST)*BFV(IT)
      BACUT=BACUT+PREM*D*D*0.005454154
      TCUT=TCUT+PREM
      THIS=THIS+PREM
      IF (DEBUG) WRITE (JOSTND,9070) IT,TOTCUT,CUT,WK4(IT),CUTEFF,PREM,
     >PRLOST,PRDSNG,CFCUT,BFCUT,DSNG(IT),SSNG(IT),CTCRWN(IT),YRDLOS(IT)
 9070 FORMAT (' IT=',I4,' TOTCUT=',F10.3,' CUT=',F10.3,' WK4(IT)=',F8.3,
     > ' CUTEFF=',F8.3,' PREM=',F8.3,' PRLOST=',F5.3,' PRDSNG=',F5.3/8X,
     > ' CFCUT=',F9.2,' BFCUT=',F9.2,' DSNG=',F7.2,' SSNG=',F7.2,
     > ' CTCRWN=',F7.2,' YRDLOS=',F10.5)
 1100 CONTINUE
C----------
C   END TREE LOOP
C----------
      GO TO 1350
 1150 CONTINUE
C----------
C  PROCESS SPECPREF AND TCONDMLT REQUESTS.
C----------
      CALL OPDONE(KUT,IY(ICYC))
      IF(IACTK.EQ.201) GO TO 1200
      IF(IACTK.EQ.203) GO TO 1325
      IF(IACTK.EQ.206) GO TO 1340

C
C     OPTION 202... TCONDMLT
C
      TCWT=PRMS(1)
      SPCLWT=PRMS(2)
      PBAWT=PRMS(3)
      PCCFWT=PRMS(4)
      PTPAWT=PRMS(5)
      GO TO 1400
C
C     OPTION 201... SPECPREF
C
 1200 CONTINUE
C
C     IF SPECIES CODE IS:
C        < 0 THEN IT APPLIES TO SPECIES IN A GROUP
C        = 0 THEN IT APPLIES TO ALL SPECIES
C        > 0 THEN IT APPLIES TO JUST THIS SPECIES
C
      ISPC=IFIX(PRMS(1))
      IF(ISPC .LT. 0)THEN
        IGRP = -ISPC
        IULIM = ISPGRP(IGRP,1)+1
        DO 1210 IG=2,IULIM
        ISPG = ISPGRP(IGRP,IG)
        IORDER(ISPG)=INT(PRMS(2))
 1210   CONTINUE
      ELSEIF(ISPC.EQ.0)THEN
        DO 1220 IS=1,MAXSP
        IORDER(IS)=INT(PRMS(2))
 1220   CONTINUE
      ELSE
        IORDER(ISPC)=INT(PRMS(2))
      ENDIF
      GO TO 1400
C
C     OPTION 203... YARDLOSS
C
 1325 CONTINUE
      LYARD  = .TRUE.
      PRLOST = PRMS(1)
      PRDSNG = PRMS(2)
      PRCRWN = PRMS(3)
      GO TO 1400
C----------
C   OPTION 206... SPLEAVE
C   PROCESS THE SPLEAVE KEYWORD BY SETTING THE ELEMENTS OF THE LOGICAL
C   ARRAY LEAVESP: LEAVE THE SPECIES = .TRUE.
C                  DON NOT LEAVE THE SECIES = .FALSE.
C----------
 1340 CONTINUE
      IF(IFIX(PRMS(1)-.5).LT.0)THEN
        IGRP=INT(-PRMS(1))
        IULIM=ISPGRP(IGRP,1)+1
        DO IG=2,IULIM
        IF(IFIX(PRMS(2)+.5).GT.0)THEN
          LEAVESP(ISPGRP(IGRP,IG))=.TRUE.
        ELSE
          LEAVESP(ISPGRP(IGRP,IG))=.FALSE.
        ENDIF
        ENDDO
      ELSEIF(IFIX(PRMS(1)+.5).EQ.0)THEN
        DO I=1,MAXSP
        LEAVESP(I)=.FALSE.
        ENDDO
      ELSE
        IF(IFIX(PRMS(2)+.5).GT.0)THEN
          LEAVESP(IFIX(PRMS(1)+.5))=.TRUE.
        ELSE
          LEAVESP(IFIX(PRMS(1)+.5))=.FALSE.
        ENDIF
      ENDIF
      GO TO 1400
C
 1350 CONTINUE
C
C  THE FOLLOWING IF-THEN CONSTRUCT MANAGES THINING ALL POINTS (PRM(I)=0
C  WITH THE THINPT /SETPTHIN KEYWORDS
C
      IF(DEBUG)WRITE(JOSTND,*)'LPTALL,JPNUM,IPTINV,LQFA=',
     &LPTALL,JPNUM,IPTINV,LQFA
      IF(LPTALL)THEN
        IF(JPNUM.LT.IPTINV)THEN
          JPNUM=JPNUM+1
          GO TO 400
        ELSE
          LPTALL=.FALSE.
        ENDIF
      ELSEIF(LPTGROUP)THEN
        IF(JPT.LE.IPTGRP(JPTGRP,1))THEN
          JPT=JPT+1
          JPNUM=IPTGRP(JPTGRP,JPT)
          IF(ITHNPI .EQ. 1)THEN
            DO IPCHK=1,IPTINV
            IF(JPNUM .EQ. IPVEC(IPCHK))THEN
              JPNUM=IPCHK
              GO TO 400
            ENDIF
            ENDDO
          ELSE
            IF(JPNUM .LE. IPTINV) GO TO 400
          ENDIF
        ENDIF
      ENDIF
C 
      IF (THIS.LE.0.0) CALL OPDEL1(KUT)
C
      IF(LQFA)GOTO 352
C
 1400 CONTINUE
C----------
C  IF THERE WERE NO REMOVALS, BYPASS THE CALCULATION OF
C  DISTRIBUTION STATISTICS.
C----------
      IF(TCUT.LE.0.0)  GO TO 1950
C----------
C  IF TRIAL THINNINGS RESULT IN A TRIVIAL TPA REMAINING IN THE STAND,
C  THEN ADJUST TRIAL THINNINGS SO ALL TPA IN THE STAND ARE REMOVED.
C  ADDITIONAL YARDING LOSSES ARE IGNORED SINCE THE TPA ARE SO SMALL.
C----------
      REMTPA = TREES - TCUT
      IF(REMTPA .GT. 0. .AND. REMTPA .LT. 0.01) THEN
        DO 1405 INDX=1,ITRN
        IF(WK4(INDX) .GT. 0.) THEN
          CFCUT=CFCUT+WK4(INDX)*CFV(INDX)
          CMCUT=CMCUT+WK4(INDX)*WK1(INDX)
          BFCUT=BFCUT+WK4(INDX)*BFV(INDX)
          BACUT=BACUT+WK4(INDX)*DBH(INDX)*DBH(INDX)*0.005454154
          TCUT=TCUT+WK4(INDX)
          WK4(INDX)=0.
        ENDIF
 1405   CONTINUE
      ENDIF
C----------
C  TRIAL THINNINGS COMPLETED.  TEST FOR COMPLIANCE WITH THE MINIMUM
C  HARVEST STANDARDS. IF ECON 'PRETEND' MODE IN EFFECT THEN DO
C  NOT ACTUALLY PERFORM THE THINNING.
C----------
      IF (DEBUG) WRITE (JOSTND,9080) BACUT,BAMIN,CMCUT,CFMIN,
     >                               BFCUT,BFMIN,CFCUT,TCFMIN
 9080 FORMAT (' IN CUTS: BACUT,BAMIN=',2F10.3,
     >        '; CMCUT,CFMIN=',2F10.2,';'/,10x,'BFCUT,BFMIN=',2F10.2,
     >        '; CFCUT,TCFMIN=',2F10.2)
C
      IF(BACUT.GE.BAMIN .AND. CMCUT.GE.CFMIN .AND. BFCUT.GE.BFMIN
     >.AND. CFCUT.GE.TCFMIN .AND. .NOT. LPRTND) GO TO 1500
C----------
C  FLAG THINNINGS AS DELETED (NO COMPLIANCE WITH MINIMUM).  CUT WILL ALSO
C  BE CANCELED IF ECON 'PRETEND' MODE IS ACTIVE.
C----------
      IF (ICFLAG. EQ. 1) GO TO 2000
      DO 1450 I=1,NTODO
      CALL OPGET (I,7,KDT,IACTK,NPS,PRMS)
      IF (IABS(IACTK).GT.222) CALL OPDEL1(I)
 1450 CONTINUE
C----------
C RESET YARD LOSS ACCUMULATOR TO 0.
C----------
      DO 1455 I=1,MAXTRE
      YRDLOS(I)=0.
 1455 CONTINUE
C-------
C    INSURE THAT REMOVAL INFO IS NOT LOADED INTO THE ECON EXTENSION
C    IF REMOVAL WAS CANCELED BECAUSE MINIMUM REQUIREMENTS WERE NOT
C    MET.
C-------
      IF (.NOT. LPRTND .OR. BACUT.LT.BAMIN .OR. CMCUT.LT.CFMIN .OR.
     >  BFCUT.LT.BFMIN .OR. CFCUT.LT.TCFMIN) GO TO 1950
C
 1500 CONTINUE
C----------
C  TRIAL THINNING IS ACCEPTABLE.  ONE FINAL PASS THROUGH THE TREE
C  LIST IS NEEDED TO EFFECT REMOVALS AND SUMMARIZE THE RESULTS.
C----------
      DMAX=0.0
      IVAC=0
      DO 1700 I=1,ITRN
      IT=IND2(I)
      IS=ISP(IT)
      IM=IMC(IT)
      WK2(IT)=0.0
      WK5(IT)=0.0
      WK6(IT)=0.0
      D=DBH(IT)
C----------
C  PREM IS THE DIFFERENCE BETWEEN ORIGINAL DENSITY AND THE TOTAL OF
C  MERCH REMOVALS AND ALL YARDING LOSSES. IF YARDING IS INACTIVE
C  THEN THE DSNG/SSNG POOLS WILL BE ZERO.
C----------
      PREM=PROB(IT)-WK4(IT)
      IF (LPRTND) GOTO 1640
C----------
C  IF THE RESIDUAL FOR THE TREE RECORD IS NEARLY ZERO, THEN:
C  SIGNAL THAT THE TREE BE DELETED AND CUT THE ENTIRE TREE.
C----------
      P=PROB(IT)-PREM
      IF (P .GT. 0.0005) GO TO 1550
      PREM=PROB(IT)
      PROB(IT)=0.0
      IF(LYARD)YRDLOS(IT)=YRDLOS(IT)+P*PRLOST
      IVAC=IVAC+1
      IND2(I)=-IT
      GO TO 1600
 1550 CONTINUE
C---------
C  IF THE PROBABILITY OF REMOVAL IS TRIVIAL, DON NOT CUT THE TREE
C----------
      IF(PREM.LT.0.00001) GO TO 1650
      PROB(IT)=P
 1600 CONTINUE
      IF(D.GT.DMAX) DMAX=D
C----------
C  IF YARDING LOSSES ARE ACCOUNTED FOR, REMOVE THE AMOUNT
C  SUCCESSFULLY REMOVED FROM THE STAND BY THE PROPORTIONAL
C  LOSS. NOTE THAT PREM2 IS THE REDEFINED PREM: THE TPA
C  ACTUALLY REMOVED FROM THE STAND. THIS IS A BIT OF A KLUDGE
C  SO THAT THE MERCH CF AND BF VOLUMES ARE THE AMOUNTS TAKEN
C  FROM THE STAND, AND WK2 AND WK3 ACCOUNT FOR THE AMOUNTS KILLED
C----------
 1640 CONTINUE
      PREM2 = AMAX1(0.0,PREM - DSNG(IT) - SSNG(IT))
C----------
C  CALL ECON EXTENSION TO ACCUMULATE REMOVAL BFV
C  INFORMATION TO BE USED IN BFV REVENUE CALCULATIONS.
C  IF WE ARE IN ECON PRETEND MODE DO NOT ACCUMULATE STATISTICS
C  FOR THE CUT.
C----------
      IF(PREM2.GT.0.00001)THEN
        CALL ECHARV (BFV(IT),D,WK1(IT),GROSPC,PREM2,IS,IT,ICYC,IY)
      ENDIF
      IF (LPRTND) GOTO 1700
C
      IF(DEBUG)WRITE(JOSTND,*)' IT,PREM,PREM2,DSNG,SSNG,YRDLOS(IT)= ',
     & IT,PREM,PREM2,DSNG(IT),SSNG(IT),YRDLOS(IT)
C
      IF(PREM.LE.0.)THEN
        YRDLOS(IT)=0.
      ELSE
        YRDLOS(IT)=YRDLOS(IT)/PREM
      ENDIF
      IF(DEBUG)WRITE(JOSTND,*)' IT,YRDLOS FINAL= ',IT,YRDLOS(IT)
      WK2(IT)=PREM*CFV(IT)
      WK3(IT)=PREM
      PREM2 = AMAX1(0.0,PREM - DSNG(IT) - SSNG(IT))
      WK5(IT)=PREM2*WK1(IT)
      WK6(IT)=PREM2*BFV(IT)
      SPCBR(IS,IM)=SPCBR(IS,IM)+WK6(IT)
      SPCMR(IS,IM)=SPCMR(IS,IM)+WK5(IT)
      SPCRT(IS,IM)=SPCRT(IS,IM)+WK3(IT)
      SPCRC(IS,IM)=SPCRC(IS,IM)+WK2(IT)
C----------
C     ADD STUMPS TO LIST FOR REGENERATION SPROUTS.
C----------
      ISHAG = IFINT
      CALL ESTUMP (IS,D,AMAX1(0.0,PREM-SSNG(IT)),ITRE(IT),ISHAG)
C----------
C  CALL WESTERN ROOT DISEASE MODEL VER. 3.0 SUBROUTINE TO ADD STUMPS
C  TO STUMP LIST
C----------
      CALL RDSTR (IT,PREM,P+PREM)
C----------
C  CALL WESTWIDE BEETLE MODEL SUBROUTINE TO CREATE SLASH FOR IPS
C----------
      CALL BMSLSH (IS,PREM,CFV(IT),0)
 1650 CONTINUE
C
      SPCRES(IS,IM)=SPCRES(IS,IM)+PROB(IT)
C
 1700 CONTINUE
C----------
C  CALL ECON EXTENSION ROUTINE TO LOAD HARVEST/THIN ECON INFORMATION
C  FOR REMOVED TREES. IF WE ARE IN 'PRETEND' MODE SKIP ACCUMULATION OF REMOVAL
C  STATISTICS.
C----------
      IF (LPRTND) GOTO 1950
C----------
C  CALL PRTRLS TO PROCESS THE CUTLIST (ARGUMENT=2) OR AFTER TREATEMENT
C  (ARGUMENT=3) OPTION.
C----------
      CALL PRTRLS (2)
      CALL PRTRLS (3)
C----------
C  CALL FVSSTD TO PROCESS THE CUTLIST FOR STAND TABLE DEVELOPMENT.
C----------
      CALL FVSSTD (2)
C----------
C RESET YARD LOSS ACCUMULATOR TO 0.
C----------
      DO 1710 I=1,MAXTRE
      YRDLOS(I)=0.
 1710 CONTINUE
C----------
C  CALL NATCRZ TO PROCESS THE CUTLIST FOR NATIONAL CRUISE SYSTEM.
C----------
      CALL NATCRZ (2)
C----------
C  PROCESS THE VISUALIZATION FOR CUTS
C----------
      CALL SVCUTS (IVAC,SSNG,DSNG,CTCRWN)
C----------
C  IF CHEAPO WAS REQUESTED CALL **ECREMS**
C----------
      IF (LECON) CALL ECREMS
C----------
C  DETERMINE SPECIES-TREE CLASS COMPOSITION FOR REMOVED TREES,
C  REMOVED VOLUME, AND RESIDUAL TREES.
C----------
      CALL COMP(OSPTT,IOSPTT,SPCRT)
      CALL COMP(OSPTV,IOSPTV,SPCRC)
      CALL COMP(OSPBR,IOSPBR,SPCBR)
      CALL COMP(OSPMR,IOSPMR,SPCMR)
C----------
C  COMPUTE PERCENTILE POINTS IN THE DISTRIBUTION OF REMOVED TREES.
C----------
      CALL PCTILE(ITRN,IND,WK3,PCT,ONTREM(7))
      CALL DIST(ITRN,ONTREM,PCT)
C----------
C  COMPUTE PERCENTILE POINTS IN THE DISTRIBUTION OF REMOVED VOLUME.
C----------
      CALL PCTILE(ITRN,IND,WK2,PCT,OCVREM(7))
      CALL DIST(ITRN,OCVREM,PCT)
      IF(CMCUT.LE.0.0) GO TO 1750
      CALL PCTILE(ITRN,IND,WK5,PCT,OMCREM(7))
      CALL DIST(ITRN,OMCREM,PCT)
 1750 CONTINUE
      IF(BFCUT.LE.0.0) GO TO 1800
      CALL PCTILE(ITRN,IND,WK6,PCT,OBFREM(7))
      CALL DIST(ITRN,OBFREM,PCT)
 1800 CONTINUE
C----------
C  REPLACE MAXIMUM DIAMETER IN DISTRIBUTIONS FOR REMOVED TREES AND
C  REMOVED VOLUME WITH DMAX.
C----------
      ONTREM(6)=DMAX
      OCVREM(6)=DMAX
      OMCREM(6)=DMAX
      OBFREM(6)=DMAX
C----------
C  CALL FIRE MODEL TO UPDATE SNAGS before TREES RECORDS ARE DELETED
C----------
      IF (DEBUG) WRITE (JOSTND,'('' CUTS: CALLING FMSCUT.'')')
      CALL FMSCUT(SPCRC,MAXSP,3,SSNG,DSNG,CTCRWN,TKCRWN)    
C----------
C     SAVE REMOVALS FOR PROCESSING WITH THE TREEBIO EM FUNCTION.
C----------
      CALL FMTREM(DSNG,SSNG,TKCRWN)
C----------
C  IF SOME OR ALL OF THE TREES ARE COMPLETELY CUT, THEN:
C  DELETE THE CUT TREE RECORDS.
C----------
      IF(DEBUG) WRITE (JOSTND,9090) IVAC,ITRN
 9090 FORMAT (/' IN CUTS, TOTALLY CUT TREES=',I5,'; TOT TREES=',I5)
      IF (IVAC.LE.0) GO TO 1850
      CALL TREDEL (IVAC,IND2)
      CALL SPESRT
      IFST=1
      IF (ITRN.LE.0) GO TO 1900
      IND(1)=0
      CALL RDPSRT(ITRN,DBH,IND,.TRUE.)
 1850 CONTINUE
C----------
C  COMPUTE PERCENTILE POINTS IN THE DISTRIBUTION OF RESIDUAL TREES.
C----------
      CALL PCTILE(ITRN,IND,PROB,PCT,ONTRES(7))
 1900 CONTINUE
      CALL DIST(ITRN,ONTRES,PCT)
      CALL COMP(OSPRT,IOSPRT,SPCRES)
 1950 CONTINUE
      IF (ITRN.LE.0 .OR. (.NOT.LAUTON.OR.LNOAUT)) GO TO 2000
      LNOAUT=.TRUE.
      IACTK=221
      NTODO=1
      IF (DEBUG) WRITE (JOSTND,9100)
 9100 FORMAT (' CUTS: THINAUTO IS BEING ATTEMPTED')
      GO TO 50
 2000 CONTINUE 
C----------
C IF WE HAD AN FFE SALVAGE REMOVAL, BUT NO LIVE TREE REMOVALS, THE
C  "POST-THIN" SVS FILE HAS NOT BEEN CREATED--DO IT NOW.
C----------
      IF (DEBUG) THEN
         WRITE(JOSTND,2005) SALVTPA, TCUT
 2005    FORMAT(' ','CUTS: TESTING FOR SALVAGE W/O CUT: SALVTPA=',F7.2,
     &              ', TCUT=',F7.2)
      ENDIF
      IF ( SALVTPA .GT. 0.0 .AND. TCUT .LE. 0.0 ) THEN
         CALL SVOUT(IY(ICYC),2,'Post salvage')
      ENDIF
C----------
C PROCESS ANY PRUNING REQUESTS.
C----------
      CALL OPFIND(1,MYACTS(23),NTODO)
      IF (DEBUG) WRITE (JOSTND,2010) NTODO,ITRN
 2010 FORMAT (' CUTS: PRUNE, NTODO=',I4,' ITRN=',I4)
      IF(NTODO .LE. 0)GO TO 2500
      DO 2490 NPRUN=1,NTODO
      CALL OPGET(NPRUN,7,KDT,IACTK,NP,PRMS)
      IF(IACTK.LT.0)GO TO 2490
C
C IF NO TREES REMAIN AFTER THINNINGS, CANCEL PRUNING.
C OTHERWISE, INITIALIZE PRUNING PARAMETERS.
C
      IF(ITRN.LE.0) THEN
         CALL OPDEL1(NPRUN)
         GO TO 2490
      ELSE
         IPRUN=0
         IMETH=IFIX(PRMS(1))
         FEET=PRMS(2)
         PPROP=PRMS(3)
         ISPEC=INT(PRMS(4))
         DLOW=PRMS(5)
         DHI=PRMS(6)
         IF (DEBUG) WRITE (JOSTND,2020) IMETH,FEET,PPROP,ISPEC,DLOW,DHI
 2020    FORMAT (' CUTS: PRUNE, IMETH=',I2,' FEET=',F7.2,' PPROP=',
     >           F7.2,' ISPEC=',I3,' DLOW=',F7.2,' DHI=',F7.2)
      ENDIF
C
C ZERO OUT THE CTCRWN VECTOR...IT KEEPS TRACK OF THE PROPORTION OF THE
C CROWN THAT IS BEING PRUNED AND REPORTS THIS TO THE FUELS&FIRE MODEL.
C
      DO I=1,ITRN
         CTCRWN(I)=0.
      ENDDO
C----------
C LOOP THROUGH TREES AND ATTEMPT PRUNING.
C----------
      DO 2480 I=1,ITRN
C----------
C  SET LINCL
C----------
      LINCL = .FALSE.
      IF(ISPEC.EQ.0 .OR. ISPEC.EQ.ISP(I))THEN
        LINCL = .TRUE.
      ELSEIF(ISPEC.LT.0)THEN
        IGRP = -ISPEC
        IULIM = ISPGRP(IGRP,1)+1
        DO 2021 IG=2,IULIM
        IF(ISP(I) .EQ. ISPGRP(IGRP,IG))THEN
          LINCL = .TRUE.
          GO TO 2022
        ENDIF
 2021   CONTINUE
      ENDIF
 2022 CONTINUE
C----------
C SKIP TREE IF IT DOES NOT MATCH SPECIFIED SPECIES OR SIZE
C----------
      IF(.NOT.LINCL) GO TO 2480
      IF(DBH(I).LT.DLOW .OR. DBH(I).GE.DHI) GO TO 2480
C
C  COMPUTE CROWN LENGTH AND HEIGHT TO BASE OF CROWN.
C
      IOLDCR=ICR(I)
      HTI=HT(I)
      CRI=FLOAT(ICR(I))
      CRLEN=HTI*CRI/100.
      CRBASE=HTI-CRLEN
C
C METHOD 1: PRUNE TO A SPECIFIED HEIGHT.
C
      IF(IMETH.EQ.1 .AND. FEET.GT.0.)THEN
        IF(FEET .GT. CRBASE) THEN
          ICR(I)=IFIX( ((HTI-FEET)/HTI)*100. + 0.5 )
          IF (ICR(I).LT. 5 .AND. IOLDCR.GT. 5) ICR(I)=5
          IPRUN=IPRUN+1
        ENDIF
C
C METHODS 2 & 3: PRUNE TO A SPECIFIED HEIGHT SUBJECT TO A MAXIMUM
C CROWN RATIO REMOVAL PERCENTAGE.  IF IN PRUNING TO THE SPECIFIED
C HEIGHT, THE CR REMOVAL PERCENTAGE WOULD BE EXCEEDED:
C METHOD 2 -- ONLY REMOVE ENOUGH CROWN TO REACH THE REMOVAL PERCENT.
C METHOD 3 -- DO NOT REMOVE ANY CROWN FROM THE TREE.
C
      ELSEIF((IMETH.EQ.2 .OR. IMETH.EQ.3) .AND.
     &        FEET.GT. 0. .AND. PPROP.GT.0.) THEN
        IF(FEET .GT. CRBASE) THEN
          FTCUT=FEET-CRBASE
          CUTMAX=CRLEN*PPROP
          IF(FTCUT .LE. CUTMAX)THEN
C
C CR REMOVAL PERCENTAGE NOT EXCEEDED
C
            ICR(I)=IFIX( ((HTI-FEET)/HTI)*100. + 0.5 )
            IPRUN=IPRUN+1
          ELSE
C
C CR REMOVAL PERCENTAGE EXCEEDED
C
            IF(IMETH .EQ. 2) THEN
              ICR(I)=IFIX( ((CRLEN-CUTMAX)/HTI)*100. + 0.5 )
              IPRUN=IPRUN+1
            ENDIF
          ENDIF
        ENDIF
C
C METHOD 4: REMOVE A SPECIFIED PROPORTION OF EVERY TREES CROWN.
C
      ELSEIF(IMETH.EQ.4 .AND. PPROP.GT.0.)THEN
        ICR(I)=IFIX( CRI*(1.0-PPROP) + 0.5 )
        IPRUN=IPRUN+1
C
C METHOD 5: REMOVE A SPECIFIED LENGTH OF CROWN FROM EVERY TREE.
C
      ELSEIF(IMETH.EQ.5 .AND. FEET.GT.0.)THEN
        ICR(I)=IFIX( ((CRLEN-FEET)/HTI)*100. + 0.5 )
        IF (ICR(I).LT. 5 .AND. IOLDCR.GT. 5) ICR(I)=5
        IPRUN=IPRUN+1
C
C METHODS 6 & 7: REMOVE A SPECIFIED LENGTH OF CROWN SUBJECT TO A
C MAXIMUM CR REMOVAL PERCENTAGE.  IF IN PRUNING THE SPECIFIED
C LENGTH, THE CR REMOVAL PERCENTAGE WOULD BE EXCEEDED:
C  METHOD 6 -- ONLY REMOVE ENOUGH CROWN TO REACH THE REMOVAL PERCENT.
C  METHOD 7 -- DO NOT REMOVE ANY CROWN FROM THE TREE.
C
      ELSEIF((IMETH.EQ.6 .OR. IMETH.EQ.7) .AND.
     &        FEET .GT. 0. .AND. PPROP.GT.0.) THEN
        CUTMAX=CRLEN*PPROP
        IF(FEET .LE. CUTMAX) THEN
C
C CR REMOVAL PERCENTAGE NOT EXCEEDED.
C
          ICR(I)=IFIX( ((CRLEN-FEET)/HTI)*100. + 0.5 )
          IPRUN=IPRUN+1
        ELSE
C
C CR REMOVAL PERCENTAGE WOULD BE EXCEEDED.
C
          IF(IMETH .EQ. 6) THEN
            ICR(I)=IFIX( ((CRLEN-CUTMAX)/HTI)*100. + 0.5 )
            IPRUN=IPRUN+1
          ENDIF
        ENDIF
      ENDIF
      BASNEW=(1.-(FLOAT(ICR(I))*.01))*HTI
      CTCRWN(I)=AMAX1(0.,1.-((HTI-BASNEW)/(HTI-CRBASE)))
      IF(DEBUG)WRITE(JOSTND,2040) I,IOLDCR,ICR(I),IOLDCR-ICR(I),
     >        CRBASE,BASNEW,CTCRWN(I)
 2040 FORMAT (' CUTS: PRUNE, I=',I4,' IOLDCR=',I3,' ICR=',I3,
     >        ' DIFF=',I3,' OLD&NEW BASE HT=',2F7.1,' CTCRWN=',F6.3)
 2480 CONTINUE
C
C  IF ANY PRUNING WAS DONE, MARK REQUEST DONE AND PASS THE PRUNED MATERIAL
C  TO THE DEBRIS POOLS.
C  IF NOT, DELETE THE REQUEST.
C
      IF(IPRUN .GT. 0) THEN
        CALL FMPRUN(CTCRWN)
        CALL OPDONE(NPRUN,IY(ICYC))
      ELSE
        CALL OPDEL1(NPRUN)
      ENDIF
      IF(DEBUG)WRITE(JOSTND,2050) IPRUN
 2050 FORMAT (' CUTS: PRUNE, IPRUN=',I4)
 2490 CONTINUE
C----------
C END OF PRUNING SEGMENT
C----------
 2500 CONTINUE
C----------
C  IF CHEAPO WAS REQUESTED CALL **ECOUT**
C----------
      IF (LECON) CALL ECOUT
C
C
      RETURN
      END
