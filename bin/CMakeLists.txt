# This CMakeLists file will generate a hierarchical build for Open-FVS.
#
# Note that every effort has been made to be platform independent, but surely
# some things will be overlooked. Please let us know of any bugs or quirks.
# Some support is included for Visual Studio and Intel compilers, but most 
# work supports GCC/GFortran under MinGW and Linux.
#
# Alternate configurations can be generated by calling CMake from configuration
# specific folders.  This may be useful for keeping a test/debug environment
# and release build in the same folder tree. Cmake tracks all dependent source 
# files and generated object code within the project subfolder, thus avoiding 
# cross-build polution and redundant compilation where possible.
#
# Example: A project folder for a debug build and a seperate folder for releas
#   mkdir <FVS bin>/debug
#   cd <FVS bin>/debug
#   cmake .. -G"MinGW Makefiles" -DFVS_VARIANTS=pnc;wcc -DBUILD_TYPE=DEBUG -DWITH_PYMOD=ON
#   mingw32-make -j4
#
#   mkdir <FVS bin>/release
#   cd <FVS bin>/release
#   cmake .. -G"MinGW Makefiles" -DFVS_VARIANTS=pnc;wcc -DBUILD_TYPE=RELEASE -DWITH_PYMOD=ON
#   mingw32-make -j4
#
# CMake will create a subfolder for each FVS variant and copy the cmake list 
# and source list files.  A sub-project is then specified for each variant. Files
# common to all variants are compiled in the top level folder for use by each 
# variant sub-project.
#
# The result is a make target for each executable, library, Python module. These
# targets can then be built individually or as a group with the "all" target. 
# For instance "mingw32-make FVSpnc" would generate the PNC shared library and 
# the PNC executable.  "mingw32-make pyfvspnc" would result in the common 
# libraries, PNC shared library, and the Python module
# module, but not the PNC executable.  "mingw32-make FVS_pnc" would result in 
# common libraries and the PNC shared library, but no executable or Python
# module.  Any combination of targets can be specified in one call to
# "mingw32-make".
# 
# Generated binaries are placed in the Open-FVS subfolder.
#
# Additional cmake arguments:
#   -DSTATIC_LINK=ON/OFF - Statically link FFE & SQL with the FVS binaries.
#   -DWITH_PYMOD=ON/OFF - Include Python module targets, default is OFF
#   -DFVS_VARIANTS=<variant list> - Explicitly list the variants to include in
#           the build as a semicolon seperated list of variant abbreviations,
#           eg. pnc;wcc;ncc;soc, the default is to include all variants.
#   -DPROFILE=ON/OFF - Include profiling info with compiled binaries.
#
# The build type can be specified as Debug or Release
#   -DCMAKE_BUILD_TYPE - Build type to perform Debug or Release.

cmake_minimum_required (VERSION 2.8.8 FATAL_ERROR)

project(OPEN_FVS C CXX Fortran)
include(GenerateExportHeader)

set(version "Open-FVS")

#Assumes the FVS source is one level up from the parent CmakeLists.txt
#Used to set the prefix of all files in *sourceList.txt
get_filename_component(src_root "${CMAKE_CURRENT_LIST_DIR}/.." ABSOLUTE)
set(source_list_dir ${CMAKE_CURRENT_LIST_DIR})

# Define default values for build configuration options
set(FVS_VARIANTS "all" CACHE STRING "FVS variants to configure")
set(WITH_PYMOD OFF CACHE BOOL "Build the Python module module.")
set(STATIC_LINK ON CACHE BOOL "Statically link FFE & SQL.")
set(BUILD_TYPE DEBUG CACHE STRING "Select the build type to perform (Debug or Release).")
set(PROFILE OFF CACHE BOOL "Compile with profiling information.")

set(CMAKE_BUILD_TYPE ${BUILD_TYPE})
message(STATUS "Build Type:" ${CMAKE_BUILD_TYPE})

#FIXME: There is possibly more than one destination for the resulting binaries
#      Perhaps this should be handled with installer packaging.
set(INSTALL_DIR "${CMAKE_BINARY_DIR}/${version}" CACHE PATH
        "Install location for compiled binaries.")
set(CMAKE_INSTALL_PREFIX ${INSTALL_DIR})
set(EXECUTABLE_OUTPUT_PATH ${INSTALL_DIR}/bin)
set(LIBRARY_OUTPUT_PATH ${INSTALL_DIR}/bin)
set(INCLUDE_INSTALL_PATH ${INSTALL_DIR}/lib)

##-----COMPILER FLAGS-----##
if (CMAKE_GENERATOR MATCHES "Visual Studio 10")
    message(STATUS "Building FVS with VS10/Intel")
    set (CMAKE_C_FLAGS   "/D_WINDOWS /W3 /Zm100" CACHE STRING "VS10 mod A" FORCE)
    set (CMAKE_CXX_FLAGS "/D_WINDOWS /W3 /Zm100" CACHE STRING "VS10 mod B" FORCE)

elseif (CMAKE_GENERATOR MATCHES "MinGW Makefiles") # AND WIN32
    message(STATUS "Building FVS with MinGW (gcc, gfortran)")
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -static ") #-static-libgfortran -static-libgcc -static-libstdc++")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static ") #-static-libgfortran -static-libgcc -static-libstdc++")
    add_definitions(-DANSI -DWINDOWS -DCMPgcc)
    
elseif (CMAKE_GENERATOR MATCHES "Unix Makefiles")
    message(STATUS "Building FVS with Unix (gcc, gfortran)")
    #static libraries are probably not necessary on this platform
    #set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -static-libgfortran -static-libgcc")
    add_definitions(-DANSI -DCMPgcc)

# TODO: Add Cygwin
else ()
    message(FATAL_ERROR "Unknown compiler toolchain; exiting")    

endif()

# BUILD_TYPE = Debug 
set (CMAKE_Fortran_FLAGS_DEBUG "-Og -g")
set (CMAKE_CXX_FLAGS_DEBUG "-Og -g")
set (CMAKE_C_FLAGS_DEBUG "-Og -g")

# BUILD_TYPE = Release
set (CMAKE_Fortran_FLAGS_RELEASE "-m32 -mfpmath=sse -Ofast -flto -march=native -funroll-loops -fwhole-program")
set (CMAKE_CXX_FLAGS_RELEASE "-m32 -mfpmath=sse -Ofast -flto -march=native -funroll-loops -fwhole-program")
set (CMAKE_C_FLAGS_RELEASE "-m32 -mfpmath=sse -Ofast -flto -march=native -funroll-loops -fwhole-program")

if (PROFILE)
    set(CMAKE_CXX_FLAGS "-pg -fprofile-arcs -ftest-coverage ${CMAKE_CXX_FLAGS}")
    set(CMAKE_C_FLAGS "-pg -fprofile-arcs -ftest-coverage ${CMAKE_C_FLAGS}")
    set(CMAKE_Fortran_FLAGS "-pg -fprofile-arcs -ftest-coverage ${CMAKE_Fortran_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS "-pg -fprofile-arcs -ftest-coverage ${CMAKE_EXE_FLAGS}")
    set(CMAKE_SHARED_LINKER_FLAGS "-pg -fprofile-arcs -ftest-coverage ${CMAKE_SHARED_LINKER_FLAGS}")
endif ()

set(CMAKE_CXX_FLAGS "-pipe ${CMAKE_CXX_FLAGS}")
set(CMAKE_C_FLAGS "-pipe ${CMAKE_C_FLAGS}")
set(CMAKE_Fortran_FLAGS "-pipe ${CMAKE_Fortran_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS "-pipe ${CMAKE_EXE_FLAGS}")
set(CMAKE_SHARED_LINKER_FLAGS "-pipe ${CMAKE_SHARED_LINKER_FLAGS}")

# TODO: Add architecture flags, -m32; -march=..., -mtune=, -mfpmath=sse, etc.
##-----END COMPILER FLAGS-----##

#Process the variant list command line argument and make a list of source lists
#  eg. cmake <...> -DFVS_VARIANTS=pnc;wcc;iec
string(TOLOWER ${FVS_VARIANTS} FVS_VARIANTS)
if (FVS_VARIANTS STREQUAL "all")
    file(GLOB source_lists "${source_list_dir}/FVS*_sourceList.txt")
    set(FVS_VARIANTS "")
    foreach (fn ${source_lists})
        string(REGEX REPLACE ".*FVS(.+)_sourceList.txt" "\\1" var ${fn})
        string(TOLOWER ${var} var)
        list(APPEND FVS_VARIANTS ${var})
    endforeach(fn)
else()
    set(source_lists "")
    foreach(var ${FVS_VARIANTS})
        set(fn "${source_list_dir}/FVS${var}_sourceList.txt")
        if (NOT EXISTS "${fn}")
            message(FATAL_ERROR "No source list for variant ${var}: ${fn}")
        else()
            message(STATUS "Variant source list: ${var} - ${fn}")
            list(APPEND source_lists ${fn})
        endif()
    endforeach(var)
endif()
    
list(LENGTH FVS_VARIANTS num_variants)
message(STATUS "FVS Variants = (${num_variants}) ${FVS_VARIANTS}")
message(STATUS "Source Root = ${src_root}")

#---Top Level Objects
list(GET source_lists 0 source_list)

# Read the source file names as a list
file(STRINGS ${source_list} source_file_list)
# Localize the paths
string(REPLACE "../" "${src_root}/" source_file_list "${source_file_list}")

#---Include Dirs
# Loop through the source files to gather the C header and include file paths
set(include_dirs)
foreach (fn ${source_file_list})
    get_filename_component(pathname ${fn} PATH)
    get_filename_component(filename ${fn} NAME)
    if (${fn} MATCHES "(.*\\.h$)|(.*\\.F77$)")
        list(APPEND include_dirs ${pathname})
    endif()
endforeach(fn)

# Include the root folder to catch the DBSTYPEDEFS.F77 location 
list(APPEND include_dirs ${CMAKE_CURRENT_BINARY_DIR})        
list(REMOVE_DUPLICATES include_dirs)
include_directories(BEFORE ${include_dirs})

#---SQL
# Setup targets for the mkdbsTypeDefs generator, and SQL library
# Get the SQL source code file
file(STRINGS ${source_list} sql_source REGEX "fvsSQL.c")
string(REPLACE "../" "${src_root}/" sql_source "${sql_source}")

# Add the command to generate the SQL type defs
file(STRINGS ${source_list} typedefs_src REGEX "mkdbsTypeDefs.c")
string(REPLACE "../" "${src_root}/" typedefs_src "${typedefs_src}")
add_executable(mkdbsTypeDefs ${typedefs_src})

set(dbstypedefs_f77 "${CMAKE_CURRENT_BINARY_DIR}/DBSTYPEDEFS.F77")

# Execute the DBSTYPEDEFS.F77 generator.
add_custom_command(
        OUTPUT ${dbstypedefs_f77}
        COMMAND mkdbsTypeDefs
        DEPENDS mkdbsTypeDefs)

# Dummy target so the DBSTYPEDEFS.F77 generator can be used as a dependency.
add_custom_target(gen_dbstypedefs ALL DEPENDS ${dbstypedefs_f77})
# Compile the SQL object library
if (STATIC_LINK EQUAL OFF)
    add_library(sql_lib SHARED ${sql_source})
    if (WIN32)
        target_link_libraries(sql_lib odbc32)
    else ()
        target_link_libraries(sql_lib odbc)
    endif ()
    set_target_properties(sql_lib PROPERTIES
            LINKER_LANGUAGE CXX
            OUTPUT_NAME FVSsql
            )
    
else ()
    add_library(sql_lib OBJECT ${sql_source})
    
endif ()
add_dependencies(sql_lib gen_dbstypedefs)

#---FFE
# Get the list of FFE C/C++ source files
set(ffe_source)
foreach (fn ${source_file_list})
    # FFE Source files are C/C++, excluding the SQL code
    if((${fn} MATCHES "(.*\\.c$)|(.*\\.cpp$)")
            AND (NOT ${fn} MATCHES "(.*mkdbsTypeDefs.c$)|(.*fvsSQL.c$)"))
        list (APPEND ffe_source ${fn})  
    endif()
endforeach(fn)
list(REMOVE_DUPLICATES ffe_source)

# Compile the FFE object library
if (STATIC_LINK EQUAL OFF)
    add_library(ffe_lib SHARED ${ffe_source})
    set_target_properties(ffe_lib PROPERTIES
            LINKER_LANGUAGE CXX
            OUTPUT_NAME FVSffe
            )
else ()
    add_library(ffe_lib OBJECT ${ffe_source})
endif ()

#---Common Objects
# Generate a list of fortran source code files common to all variants
set(common_source)
list(GET source_lists 0 sl)
file(STRINGS ${sl} common_source REGEX "(.*f$)|(.*f90$)")
string(REPLACE "../" "${src_root}/" common_source "${common_source}")

set(temp_src)
foreach(fn ${common_source})
    if ((NOT ${fn} MATCHES ".*main.f$")
        # Variant specific code includes the prgprm and esparm files
        AND (NOT "${foo}" MATCHES ".*PRGPRM.F77.*")
        AND (NOT "${foo}" MATCHES ".*ESPARM.F77.*"))
        list(APPEND temp_src ${fn})
    endif()
endforeach()
set(common_source ${temp_src})

# Parse each configured variant source file list keeping files common to all
foreach (sl ${source_lists})
    set(temp_src)
    # Read the list of source files for this variant
    file(STRINGS ${sl} fl)
    string(REPLACE "../" "${src_root}/" fl "${fl}")
    
    # Compare each file currently in the common list with the variant file list
    foreach(fn ${common_source})
        list(FIND fl ${fn} m)
        # FIND returns -1 for files not in the variant file list
        if (NOT m EQUAL -1)
            list(APPEND temp_src ${fn})
        endif()
    endforeach()
    set(common_source ${temp_src})
endforeach()
list(REMOVE_DUPLICATES common_source)

# Compile the  object libraries
add_library(common_objs OBJECT ${common_source})

# Ensure the SQL and common objects are built in sequence
add_dependencies(common_objs sql_lib)

#---Locate key Python items
if (WITH_PYMOD)
    ##TODO: This works well, but the safer approach would be to use distutils
    ##      with a template setup.py script and avoid all the F2PY command 
    ##      line manipulation.
    ##      NOTE: distutils worked up to linking with the FVS object library
    ##            I could not find a way to get the list of obj files.
    find_package(PythonInterp 2.7 REQUIRED)
    find_package(PythonLibs REQUIRED)
#    find_package(Numpy REQUIRED)
    get_filename_component(PYTHON_HOME ${PYTHON_EXECUTABLE} DIRECTORY)
    
    # Discover key Python configuration variables
    execute_process(
            COMMAND ${PYTHON_EXECUTABLE} -c "import sysconfig\nprint sysconfig.get_config_var('py_version_nodot')"
            OUTPUT_VARIABLE python_ver
            OUTPUT_STRIP_TRAILING_WHITESPACE
            )
    execute_process(
            COMMAND ${PYTHON_EXECUTABLE} -c "import sysconfig\nprint sysconfig.get_config_var('SO')"
            OUTPUT_VARIABLE pymod_ext
            OUTPUT_STRIP_TRAILING_WHITESPACE
            )
    execute_process(
            COMMAND ${PYTHON_EXECUTABLE} -c "import numpy as n\nprint n.get_include()"
            OUTPUT_VARIABLE numpy_include
            OUTPUT_STRIP_TRAILING_WHITESPACE
            )

    # Translate the Fortran and C compiler names for use with F2PY
    # NOTE: The compilers could be more complete
    #       Refer to <cmake install>\cmake\share\cmake-2.8\Modules\CMakeFortranCompilerId.F.in; f2py.py -c --help-fcompiler
    #       and <cmake install>\cmake\share\cmake-2.8\Modules\CMakeCCompilerId.c.in; f2py.py -c --help-compiler
    if (${CMAKE_Fortran_COMPILER_ID} STREQUAL "GNU")
        set(f2py_fcompiler "gnu95")
    elseif (${CMAKE_Fortran_COMPILER_ID} STREQUAL "Intel")
        set(f2py_fcompiler "intelv")
    else ()
        message(SEND_ERROR "F2PY Fortran compiler was not recognized: ${CMAKE_Fortran_COMPILER_ID}")
    endif ()

    if (${CMAKE_C_COMPILER_ID} STREQUAL "GNU")
        set(f2py_compiler "mingw32")
    elseif (${CMAKE_C_COMPILER_ID} STREQUAL "Intel")
        set(f2py_compiler "intel")
    elseif (${CMAKE_C_COMPILER_ID} STREQUAL "MSVC")
        set(f2py_compiler "msvc")
    else ()
        message(SEND_ERROR "F2PY C compiler was not recognized: ${CMAKE_C_COMPILER_ID}")
    endif ()
    
    # Locate the PyDoc script
    if (WIN32)
        file(GLOB_RECURSE PYDOC_EXE ${PYTHON_HOME}/*/pydoc.py)
    else ()
        find_program(PYDOC_EXE "pydoc")
    endif ()
    
    message(STATUS "PYDOC_EXE: ${PYDOC_EXE}")
    
endif() # Global Python variables

#---Configure each requested variant.
message(STATUS "Configure variants: ${FVS_VARIANTS}")
math(EXPR num_variants "${num_variants}-1")
foreach(v RANGE ${num_variants})
    list(GET FVS_VARIANTS ${v} variant)
    get_filename_component(variant_dir ${CMAKE_BINARY_DIR}/${variant} ABSOLUTE)
    message(STATUS "Variant Dir = ${variant_dir}")

    file(MAKE_DIRECTORY ${variant_dir})

    # Write out the modified source list file to the variant sub directory
    list(GET source_lists ${v} srclst_fn)
    message(STATUS "Source List File: ${srclst_fn}")
    file(STRINGS ${srclst_fn} source_list NEWLINE_CONSUME)
    string(REPLACE "../" "${src_root}/" source_list "${source_list}")
    file(WRITE ${variant_dir}/sourcelist.txt ${source_list})

    # Write out the new variant CMakeLists file
    # TODO: Move the variant template to a seperate file.
    file(STRINGS CMakeLists.txt cmakelist NEWLINE_CONSUME)
    string(REGEX REPLACE ".*##-----DO NOT REMOVE THIS TAG-----##" ""
           cmakelist ${cmakelist})
    
    # Replace template strings 
    string(REGEX REPLACE "<<variant>>" "${variant}" cmakelist ${cmakelist})
    string(REGEX REPLACE "<<source_list>>" "${variant_dir}/sourcelist.txt" cmakelist ${cmakelist})
    string(REGEX REPLACE "<<with_pymod>>" ${WITH_PYMOD} cmakelist ${cmakelist})
    file(WRITE ${variant_dir}/CMakeLists.txt ${cmakelist})
    
    # Add the the FVS variant CMakeLists.txt as a sub-project
    add_subdirectory(${variant_dir} ${variant_dir})
endforeach()

return()

##This text below this tag becomes the CMakeLists.txt file in the subdirectory
##-----DO NOT REMOVE THIS TAG-----##
cmake_minimum_required(VERSION 2.8.8 FATAL_ERROR)

project(FVS<<variant>> C CXX Fortran)

set(fvs_exe "FVS${variant}")
set(fvs_lib "libFVS${variant}")

#Replaced by regex during configuration
set(variant <<variant>>)
set(source_list <<source_list>>)

message(STATUS "Configure variant: ${variant}")
message(STATUS "CMake Build Type: ${CMAKE_BUILD_TYPE}")
message(STATUS "Profiling: ${PROFILE}")
message(STATUS "source_list: ${source_list}")
message(STATUS "fvs_exe: ${fvs_exe}")
message(STATUS "fvs_lib: ${fvs_lib}")
#message(STATUS "Shared Link Flags: ${CMAKE_SHARED_LINKER_FLAGS}")
#message(STATUS "Exe Link Flags: ${CMAKE_EXE_LINKER_FLAGS}")

# Parse the source file list and populate Cmake lists
set(include_dirs)
set(fvs_source)
set(main_source)
set(pymod_source)

# Process the source list for the variant
file(STRINGS ${source_list} source_files)
# Localize the paths
string(REPLACE "../" "${src_root}/" source_files "${source_files}")

foreach (fn ${source_files})
    if (NOT ${fn} MATCHES "^#.*")
        get_filename_component(filename ${fn} NAME)
        get_filename_component(pathname ${fn} PATH)
        get_filename_component(extname ${fn} EXT)
        
        # Need the location of C headers and include files
        if (${fn} MATCHES "(.*\\.h$)|(.*\\.F77$)")
            list(APPEND include_dirs ${pathname})
        endif()
        
        # Separate the core FVS code from executable main routine
        if ((${extname} STREQUAL ".f") OR (${extname} STREQUAL ".f90"))
            if (${filename} STREQUAL "main.f")
                list(APPEND main_source ${fn})
            else()
                list (APPEND fvs_source ${fn})
            endif()
        endif()
        
        unset(filename CACHE)
        unset(pathname CACHE)
        unset(extname CACHE)
    endif()
endforeach(fn)

list(REMOVE_DUPLICATES include_dirs)
list(REMOVE_DUPLICATES fvs_source)
list(REMOVE_DUPLICATES main_source)

# Add the newly found include dirs
include_directories(BEFORE ${include_dirs})

# Remove source files already in common, FFE, SQL
set(sl ${common_source} ${ffe_source} ${sql_source})
foreach(fn ${sl})
    list(FIND fvs_source ${fn} i)
    if (NOT ${i} EQUAL -1)
        list(REMOVE_ITEM fvs_source ${fn})
    endif()
endforeach()

#---CMake Variables
file(WRITE "cmakevars-${variant}.txt" "CMake Variables - ${variant}")
get_cmake_property(_variableNames VARIABLES)
foreach (_variableName ${_variableNames})
    file(APPEND "cmakevars-${variant}.txt" "${_variableName}=${${_variableName}}")
endforeach()

#---Compile the variant FVS code to an object library
set(fvs_objs "fvs${variant}_objs")
add_library(${fvs_objs} OBJECT ${fvs_source})

##TODO: Need a fixup for VBA 
#if (WIN32)
#    set_target_properties(${fvs_lib} PROPERTIES
#            LINK_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,--output-def,${fvs_lib}.def"
#            )
#endif ()

#---Link the shared library and executables
if (STATIC_LINK EQUAL OFF)
    add_library(${fvs_lib} SHARED
        $<TARGET_OBJECTS:common_objs>
        $<TARGET_OBJECTS:${fvs_objs}>)
    target_link_libraries(${fvs_lib} ffe_lib sql_lib)
    
    add_executable (${fvs_exe} ${main_source}
        $<TARGET_OBJECTS:common_objs>
        $<TARGET_OBJECTS:${fvs_objs}>)
    target_link_libraries(${fvs_exe} ffe_lib sql_lib)
    
else ()
    add_library(${fvs_lib} SHARED
        $<TARGET_OBJECTS:common_objs>
        $<TARGET_OBJECTS:${fvs_objs}>
        $<TARGET_OBJECTS:ffe_lib>
        $<TARGET_OBJECTS:sql_lib>
        )
    add_executable (${fvs_exe} ${main_source}
        $<TARGET_OBJECTS:common_objs>
        $<TARGET_OBJECTS:${fvs_objs}>
        $<TARGET_OBJECTS:ffe_lib>
        $<TARGET_OBJECTS:sql_lib>
        )
        
endif ()

if (WIN32)
    target_link_libraries(${fvs_lib} odbc32)
    target_link_libraries(${fvs_exe} odbc32)
else ()
    target_link_libraries(${fvs_lib} odbc)
    target_link_libraries(${fvs_exe} odbc)
endif ()

set_target_properties(${fvs_exe} PROPERTIES LINKER_LANGUAGE Fortran)
set_target_properties(${fvs_lib} PROPERTIES
    LINKER_LANGUAGE Fortran
    PREFIX ""
    IMPORT_PREFIX ""
    )

install(TARGETS ${fvs_lib} ${fvs_exe} DESTINATION "./")

# Create a header file for the variant library
generate_export_header(${fvs_lib}
    BASE_NAME ${fvs_lib}
    EXPORT_MACRO_NAME ${fvs_lib}_EXPORT
    EXPORT_FILE_NAME ${fvs_lib}_Export.h
    STATIC_DEFINE ${fvs_lib}_BUILT_AS_STATIC
    )
# FIXME: Installation is not working
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${fvs_lib}_Export.h DESTINATION "./")

# Build the Python module if requested
if (WITH_PYMOD)
    message(STATUS "Configure the Python module.")

    set(pymod_name "pyfvs${variant}")
    set(pymod_sig "pyfvs${variant}.pyf")
    
    include_directories(
        ${PYTHON_INCLUDE_DIRS}
        ${numpy_include}
        )
    
    set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} ${PYTHON_LIBRARIES})

    # Define the F2PY outputs to expect
    file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/f2py")
    set(f2py_sig "${CMAKE_CURRENT_BINARY_DIR}/f2py/${pymod_sig}") # pyf signature file
    set(f2py_lib "${LIBRARY_OUTPUT_PATH}/${pymod_name}${pymod_ext}") # pyd/so python module
    
    # Generated wrapper code
    set(f2py_wrappers "${CMAKE_CURRENT_BINARY_DIR}/f2py/${pymod_name}module.c")
    list(APPEND f2py_wrappers "${CMAKE_CURRENT_BINARY_DIR}/f2py/${pymod_name}-f2pywrappers.f")
    list(APPEND f2py_wrappers "${CMAKE_CURRENT_BINARY_DIR}/f2py/${pymod_name}-f2pywrappers2.f90")
    list(APPEND f2py_wrappers "${CMAKE_CURRENT_BINARY_DIR}/f2py/fortranobject.c")
    
    # Process the source list for files to include in the Python module
    file(STRINGS ${source_list} source_files)
    string(REPLACE "../" "${src_root}/" source_files "${source_files}")
    
    # Source files to be wrapped with F2PY
    set(_pymod_src "apisubs.f" "cmdline.f" "filopn.f" "fvs.f" "rann.f")
    # Routines to be skipped by F2PY
    set(pymod_skip "") #required by f2py_gen 
    
    foreach (fn ${source_files})
        if (NOT ${fn} MATCHES "^#.*")
            get_filename_component(filename ${fn} NAME)
            
            list(FIND _pymod_src ${filename} x)
            if (x GREATER -1)
                list(APPEND pymod_source ${fn})
            endif()
            unset(filename)
        endif()
    endforeach(fn)
    list(REMOVE_DUPLICATES pymod_source)
    
    # Update the F2PY automation script template with the current configuration and save it to the build dir
    set(f2py_gen "${CMAKE_CURRENT_BINARY_DIR}/f2py_gen.py")
    configure_file("${CMAKE_CURRENT_LIST_DIR}/../../f2py_gen.py" ${f2py_gen})

    # Execute the configured F2PY script to generate the wrapper code 
    add_custom_command(
            OUTPUT ${f2py_sig} ${f2py_wrappers}
            COMMAND ${PYTHON_EXECUTABLE} ${f2py_gen}
            DEPENDS ${pymod_source}
            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
            )

    # Compile the Python module and link required libraries
    if (STATIC_LINK EQUAL OFF)   
        add_library(${pymod_name} SHARED ${f2py_wrappers}
            $<TARGET_OBJECTS:common_objs>
            $<TARGET_OBJECTS:${fvs_objs}>)
        target_link_libraries(${pymod_name} ffe_lib sql_lib)
        
    else ()
        add_library(${pymod_name} SHARED ${f2py_wrappers}
            $<TARGET_OBJECTS:common_objs>
            $<TARGET_OBJECTS:${fvs_objs}>
            $<TARGET_OBJECTS:sql_lib>
            $<TARGET_OBJECTS:ffe_lib>)
            
        if (WIN32)
            target_link_libraries(${pymod_name} odbc32)
        else ()
            target_link_libraries(${pymod_name} odbc)
        endif ()
        
    endif ()
    
    target_link_libraries(${pymod_name} ${PYTHON_LIBRARIES}) # "python${python_ver}")
    
    # Python is a C language, so link accordingly
    set_target_properties(${pymod_name} PROPERTIES
            LINKER_LANGUAGE CXX
            #OUTPUT_NAME ${pymod_name}
            SUFFIX ${pymod_ext}
            IMPORT_SUFFIX ${pymod_ext}
            PREFIX ""
            IMPORT_PREFIX ""
            )
    
    # Ensure the signature and module code is fresh
    add_dependencies(${pymod_name} ${f2py_sig})
    add_custom_target(${pymod_name}-targ ALL DEPENDS ${pymod_name})
    
    #TODO: setup a destination relative to Python site-packages or equivalent
    install(TARGETS ${pymod_name} DESTINATION "./")    
    
    # Add the build folder to the clean target
    set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES "${CMAKE_CURRENT_BINARY_DIR}/f2py")

    # Generate a PyDoc HTML file for the module
    if (WIN32)
        add_custom_command(
                TARGET ${pymod_name}
                POST_BUILD
                COMMAND ${PYTHON_EXECUTABLE} ${PYDOC_EXE} -w ${pymod_name} > nul
                # Move to the output location so PyDoc can find the module 
                WORKING_DIRECTORY ${LIBRARY_OUTPUT_PATH}
                )
    else ()
        add_custom_command(
                TARGET ${pymod_name}
                POST_BUILD
                COMMAND ${PYDOC_EXE} -w ${pymod_name} > nul
                # Move to the output location so PyDoc can find the module 
                WORKING_DIRECTORY ${LIBRARY_OUTPUT_PATH}
                )
    endif ()
    
    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/"${pymod_name}.html" DESTINATION "${INSTALL_DIR}/doc")
    
    message(STATUS "*** End PyMod Configuration ***")
    
endif()

# Add a make target for the variant to build everything seperate from 'all'
if (WITH_PYMOD)
    add_custom_target(${variant} DEPENDS ${pymod_name} ${fvs_exe} ${fvs_lib})
else ()
    add_custom_target(${variant} DEPENDS ${fvs_exe} ${fvs_lib})
endif ()
