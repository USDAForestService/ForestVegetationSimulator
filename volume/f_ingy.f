C----------
C VOLUME $Id: f_ingy.f 0000 2018-02-14 00:00:00Z gary.dixon24@gmail.com $
C----------
!== last modified  10-26-2005
C     FILE CONTAINS THE FOLLOWING ROUTINES:
C          SHP_C2
C          COR_C2
C          VAR_C2
C          FDBT_C2
C          BRK_UPA2
C          BRK_UPB2
C          BRK_UPC2
C          BRK_UPD2
C          BRK_UPH2
c***********************************************************************
c***********************************************************************
      SUBROUTINE SHP_C2(JSP,DBH,HT,GeoSUB,RFLW,RHFW)
c                Stem form  SHAPE parameters for COOP #2 (INGY, east-side)
c***********************************************************************
c                   
c                         J. W. Flewelling, July, 1996 
c
c                                   NOTE:  F(49) reference  REMOVED

      IMPLICIT DOUBLE PRECISION (A-H, O-Z) 
      CHARACTER*2 PPSUB(16),GFSUB(14),WLSUB(21),dfSUB(3),ESSUB(3)
      CHARACTER*2 GEOSUB,GEOTEMP

      INTEGER PPSUBF(16),GFSUBF(14),WLSUBF(21),dfSUBF(3),ESSUBF(3)
      INTEGER JSP,JRSP, I, IP

      REAL*8 GFSUBC(14),PPSUBC(16),wlSUBC(21),dfSUBC(3),ESSUBC(3)
      REAL*8 F(47,23),DMEDIAN,DFORM
      REAL*4 RFLW(6),RHFW(4)
      REAL*4 RHI1, RHI2, RHC, RHLONGI,DBH, HT
      REAL*8 U7,U1,U9T,U9,U8,U2,U3,U4,U5,U6
      REAL*4 R1, R2, R3, R4, R5, A3
           
C     DOUGLAS FIR x
      DATA (F(I,11),I=10,47)/0.19750000D+00, 0.96630000D+00, 
     >           0.36700000D-03, -0.29164923D+01,  0.33255872D+00,
     >          -0.19692956D+00,  0.83070580D-01,  0.0, 
     >          -0.12712219D+02,  0.25447851D+01,  0.10000000D+02,
     >           0.64074304D+00,  0.73487234D-02,  0.0,
     >           0.0,            -0.50396657D+01, -0.10401496D+00,
     >           0.64537237D-01,  0.00000000D+00,  0.13406196D+01,
     >          -0.59490857D+00, -0.15332078D+01,  0.20255950D+00,
     >           0.00000000D+00,  0.81367568D+00,  0.41706924D+01, 
     >          -0.37302026D+00, -0.68581021D+00,  0.11919105D+01,
     >           0.57298855D+01, -0.15339884D+00,  0.00000000D+00,
     >           0.15708690D+02, -0.42931675D+01,  0.0,
     >           0.99873166D+00,  0.00000000D+00,  0.15871937D-02/
  
      DATA (dfSUBF(I),I=1,3)/25,34,38/

      DATA (dfSUBC(I),I=1,3)/-5.1791473, 0.86605974, 1.4757324/

      DATA (dfSUB(I),I=1,3)/'15','15','15'/
 
C     WESTERN LARCH x                
      DATA (F(I,12),I=10,47)/0.55800000D-01, 0.12635000D+01, 
     >                -0.31600000D-03,-0.37412141D+01, 0.44575252D+00,
     >                 0.89801684D+00, 0.14462736D+00, 0.0,
     >                -0.85746216D+01, 0.13343304D+01,-0.10000000D+02,
     >                 0.82267167D+00, 0.14739988D-02, 0.00000000D+00,
     >                 0.00000000D+00,-0.22688523D+01,-0.36440716D+00,
     >                 0.53591173D+00,-0.12185507D+00, 0.62100649D+01,
     >                -0.57931125D+01,-0.20341109D+01, 0.10866030D+01,
     >                 0.00000000D+00, 0.24256394D+01, 0.33616835D+01,
     >                -0.77862842D+00,-0.51614876D+00,-0.12757916D+01,
     >                 0.52064652D+01, 0.70916365D-01, 0.00000000D+00,
     >                 0.70100000D+01, 0.00000000D+00, 0.0,
     >                 0.10570004D+01,-0.37228278D-01, 0.00000000D+00/

      DATA (wlSUBF(I),I=1,21)/25,34,38,25,34,38,25,34,38,25,34,38,
     >              25,34,38,25,34,38,25,34,38/

      DATA (wlSUBC(I),I=1,21)/-2.1106, 2.4462, -0.6887, -2.1106, 2.4462,
     >               -0.6887, -2.1106, 2.4462, -0.6887, -2.2589, 2.4804,
     >               -0.9800, -2.3163, 2.5635, -1.8389, -2.2120, 2.3068,
     >               -3.1474, -2.6188, 2.2260, -2.9061/

      DATA (wlSUB(I),I=1,21)/'11','11','11','12','12','12','13','13',
     >          '13', '14','14','14','21','21','21','22','22','22',
     >          '23', '23', '23'/

C     GRAND FIR x                                                 
      DATA (F(I,13),I=10,47)/0.61910000D+00, 0.62000000D+00,
     >                 0.11060000D-02,-0.42831232D+01, 0.45032799D+00,
     >                 0.73614139D+00, 0.00000000D+00, 0.0,
     >                 0.00000000D+00, 0.00000000D+00, 0.00000000D+00,
     >                 0.99000000D+00, 0.00000000D+00, 0.00000000D+00,
     >                 0.00000000D+00,-0.29863381D+00,-0.82225003D+00,
     >                -0.27240416D+01, 0.67657190D+00, 0.16919024D+02,
     >                -0.61079274D+01,-0.45921161D+01, 0.12145862D+01,
     >                 0.64609717D-01, 0.28820208D+01, 0.65046828D+01,
     >                -0.88466758D+00,-0.10711229D+01,-0.70000000D+01,
     >                 0.00000000D+00, 0.00000000D+00, 0.00000000D+00,
     >                 0.70100000D+01, 0.00000000D+00, 0.0,            
     >                 0.11283420D+01, 0.00000000D+00, 0.00000000D+00/
     
      DATA (GFSUBF(I),I=1,14)/25, 34, 25, 34, 25, 34, 25, 34, 0, 0, 0,
     >          0, 0, 0/
      DATA (GFSUBC(I),I=1,14)/0.1155, 3.4515, -0.3523, 2.7100, -0.5377,
     >          2.3612, -0.4220, 3.0112, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0/
      
      DATA (GFSUB(I),I=1,14)/'11', '11', '12', '12', '13', '13', '14',
     >          '14', '0','0', '0', '0', '0', '0'/
     
C     PONDEROSA PINE  x
      DATA (F(I,14),I=10,47)/0.60780000D+00, 0.68530000D+00, 
     >                   0.89600000D-03, 0.23497863D+00,-0.49304350D+00,
     >                  -0.40653847D+00, 0.20354301D+00, 0.0,
     >                  -0.51250474D+02, 0.10000000D+02, 0.10000000D+02,
     >                   0.99000000D+00, 0.00000000D+00, 0.0, 
     >                   0.0,            0.31515199D+01,-0.15821358D+01,
     >                  -0.78226363D+00, 0.20572640D+00, 0.70000000D+01,
     >                   0.00000000D+00,-0.21733814D+01, 0.00000000D+00,
     >                   0.00000000D+00, 0.16232866D+01, 0.28274701D+01,
     >                  -0.61473990D+00,-0.43899912D+00,-0.70000000D+01,
     >                   0.00000000D+00, 0.00000000D+00, 0.00000000D+00,
     >                   0.70100000D+01, 0.00000000D+00, 0.0,
     >                   0.16016982D+01, 0.30035441D-01,-0.11189887D+00/

      DATA (PPSUBF(I),I=1,16)/25,34,25,34,25,34,25,34,
     >                       25,34,25,34,25,34,25,34/

      DATA (PPSUBC(I),I=1,16)/3.1502, 1.7744, 3.1656, 1.5816, 3.2769,
     >        1.7373, 3.2767, 1.6983, 3.2245252, 1.6981343, 2.9407, 
     >        1.3921, 2.9407, 1.3921, 2.9407, 1.3921/

      DATA (PPSUB(I),I=1,16)/'11','11','12','12','13','13','14','14',
     >                       '15','15','21','21','22','22','23','23'/ 
     
C     LODGEPOLE PINE x
      DATA (F(I,15),I=10,47)/0.27880000D+00, 0.80570000D+00,
     >                 0.60300000D-03,-0.32297770D+01, 0.29066903D+00,
     >                 0.00000000D+00, 0.30000000D+00, 0.0, 
     >                -0.73135235D+01, 0.17997854D+01,-0.46687141D+01,
     >                 0.99000000D+00, 0.00000000D+00, 0.0, 
     >                 0.0,           -0.39880859D+01, 0.00000000D+00,
     >                 0.13488046D+00, 0.00000000D+00,-0.22454794D+01,
     >                -0.89091796D+01, 0.24904793D-03, 0.26158442D+01,
     >                -0.14388585D+00, 0.54543027D+00, 0.10461105D+01,
     >                -0.17766248D+01,-0.46411162D-01,-0.70000000D+01,
     >                 0.00000000D+00, 0.00000000D+00, 0.00000000D+00,
     >                 0.71000000D+01, 0.00000000D+00, 0.0, 
     >                 0.10483171D+01, 0.00000000D+00, 0.00000000D+00/
     
C     WESTERN RED CEDAR  x
      DATA (F(I,16),I=10,47)/0.12003000D+01, 0.38370000D+00,
     >                 0.23610000D-02, -0.13362316D+01, -0.76083922D-01,
     >                 0.53689416D+00,  0.51502913D-01,  0.0,
     >                 0.12752668D+05, -0.29461345D+04,  0.00000000D+00,
     >                 0.86133893D+00,  0.87843224D-03,  0.00000000D+00,
     >                -0.92557385D-01, -0.32607008D+01, -0.39778231D+00,
     >                 0.37451942D+00,  0.00000000D+00, -0.70000000D+01,
     >                -0.30300041D-01,  0.68038910D+00,  0.00000000D+00,
     >                 0.00000000D+00, -0.13274105D+00,  0.63544397D+00,
     >                -0.12987130D-01,  0.39612037D+00, -0.10756845D+01,
     >                -0.12267329D+00,  0.00000000D+00,  0.00000000D+00,
     >                -0.17156840D+04,  0.36000586D+03,  0.0,
     >                 0.10236417D+01,  0.00000000D+00,  0.00000000D+00/
     
C     MOUNTAIN HEMLOCK x
      DATA (F(I,17),I=10,47)/0.83820000D+00, 0.51300000D+00,
     >                0.16430000D-02, -0.34559297D+01,  0.22795657D+00,
     >                0.99130564D+00,  0.00000000D+00,  0.0,
     >                0.78000000D+01,  0.00000000D+00,  0.00000000D+00,
     >                0.60000001D+00,  0.31347634D-03,  0.72138116D-01,
     >                0.10068839D+00,  0.17582080D+00, -0.74261909D+00,
     >               -0.53570996D+01,  0.12300888D+01,  0.13222316D+02,
     >                0.39423648D+01, -0.40000000D+01,  0.00000000D+00,
     >                0.00000000D+00,  0.21475964D+01, -0.50787650D+01,
     >               -0.68591807D+00,  0.94211201D+00,  0.69986956D+01,
     >                0.49639291D+01, -0.16521763D+01,  0.15802387D+00,
     >               -0.10015951D+02,  0.0,             0.0,
     >                0.47345027D+01,  0.00000000D+00,  0.00000000D+00/
     
C     WHITE PINE  x
      DATA (F(I,18),I=10,47)/0.49340000D+00,  0.67040000D+00, 
     >               0.72300000D-03, -0.18546510D+01, -0.85523346D-02,
     >              -0.74387901D-02,  0.54563992D-01,  0.0,
     >               0.11464565D+02, -0.30019058D+01,  0.10000000D+02,
     >               0.99000000D+00,  0.00000000D+00,  0.00000000D+00,
     >               0.00000000D+00,  0.28974423D+00, -0.95880328D+00,
     >              -0.52319899D+01,  0.11934487D+01, -0.44019249D+03,
     >              -0.25373650D+03,  0.11673600D+03,  0.77186108D+02,
     >              -0.69085106D+01,  0.40552875D+01,  0.51058436D+01,
     >              -0.10162153D+01, -0.83543326D+00, -0.56895575D+01,
     >               0.10097670D+01, -0.26230901D+01,  0.00000000D+00,
     >               0.70100000D+01,  0.00000000D+00,  0.0,
     >               0.10608156D+01,  0.00000000D+00,  0.00000000D+00/
     
C     ENGELMANN SPRUCE x
      DATA (F(I,19),I=10,47)/0.21020000D+00, 0.91540000D+00,
     >               0.37900000D-03,-0.11783855D+01,-0.14696420D+00,
     >               0.00000000D+00, 0.00000000D+00, 0.0, 
     >               0.47833781D+01,
     >               0.00000000D+00, 0.00000000D+00, 0.11012131D+01, 
     >               0.00000000D+00, 0.00000000D+00,-0.14080632D+00,
     >              -0.32084903D+01,-0.50803245D+00,-0.28716052D+01,
     >               0.68962947D+00,-0.55872917D+01, 0.10768701D+01,
     >               0.00000000D+00, 0.00000000D+00, 0.00000000D+00,
     >               0.67467581D+00, 0.26196857D+01,-0.28700698D+00,
     >              -0.24239205D+00, 0.27377330D+02, 0.54066640D+01,
     >              -0.78134218D+01, 0.00000000D+00, 0.70100000D+01,
     >               0.00000000D+00, 0.0,            0.10128065D+01,
     >              -0.76869726D-02, 0.00000000D+00/

      DATA (ESSUBF(I),I=1,3)/25,34,38/

      DATA (ESSUBC(I),I=1,3)/ -3.0604051, 0.71303009, 28.449170/

      DATA (ESSUB(I),I=1,3)/'15','15','15'/

C     SUBALPINE FIR x
      DATA (F(I,20),I=10,47)/0.51943000D+00, 0.71090000D+00,
     >               0.50300000D-03,-0.31923987D+01, 0.23511076D+00, 
     >               0.70357974D+00, 0.27921523D-01, 0.0,
     >               0.50014801D+01, 0.00000000D+00, 0.00000000D+00, 
     >               0.99000000D+00, 0.00000000D+00, 0.0, 0.0,
     >              -0.69388143D+01, 0.65934447D+00,
     >               0.58065085D+01,-0.94399410D+00,-0.70000000D+01,
     >               0.61594354D+00, 0.92176422D+00, 0.00000000D+00,
     >               0.00000000D+00, 0.28173605D+01, 0.82345395D+01,
     >              -0.72343654D+00,-0.13929103D+01,-0.70000000D+01,
     >               0.00000000D+00, 0.00000000D+00, 0.00000000D+00,
     >               0.70100000D+01, 0.00000000D+00, 0.0, 
     >               0.10499208D+01, 0.00000000D+00, 0.00000000D+00/

C     BALSAM (GF,WF OR SUBALPINE FIR) B.C.  x
      DATA (F(I,21),I=10,47)/0.61910000D+00, 0.62000000D+00, 
     >              0.11060000D-02, -0.31216721D+01,  0.20476079D+00,
     >              0.21889439D+00,  0.00000000D+00,  0.0,
     >              0.50000000D+01,  0.00000000D+00,  0.00000000D+00,
     >              0.99000000D+00,  0.00000000D+00,  0.0,
     >              0.0,            -0.41759884D+01,  0.0,
     >              0.0,            -0.48789854D+00, -0.72972498D+00,
     >             -0.26246239D-01, -0.92747210D+00,  0.00000000D+00,
     >              0.00000000D+00,  0.53238816D+00,  0.85805304D+01,
     >             -0.15335061D+00, -0.16191350D+01,  0.37954976D+02,
     >             -0.69887695D+01, -0.10000000D+02,  0.00000000D+00,
     >              0.70100000D+01,  0.00000000D+00,  0.0,
     >              0.10050000D+01,  0.00000000D+00,  0.00000000D+00/
     
C     PONDEROSA PINE  Central Idaho Taper Project
C      DATA (F(I,22),I=10,47)/ 0.59532444D+00, 0.71960574D+00,
C     >              0.00000000D+00, -0.35325066D+00, -0.36096083D+00,
C     >             -0.29617657D+00,  0.00000000D+00,  0.0,
C     >             -0.51250474D+02,  0.10000000D+02,  0.10000000D+02,
C     >              0.99000000D+00, -0.23852919D-03,  0.0,
C     >              0.0,             0.32567984D+01, -0.16274389D+01,
C     >             -0.65209881D+01,  0.15847455D+01,  0.70000000D+01,
C     >             -0.31937474D+02, -0.17812912D+01,  0.80409553D+01,
C     >             -0.14459854D+00,  0.24745882D+01,  0.31064531D+01,
C     >             -0.84611975D+00, -0.42192772D+00, -0.70000000D+01,
C     >              0.00000000D+00,  0.00000000D+00,  0.00000000D+00,
C     >              0.70100000D+01,  0.00000000D+00,  0.0,
C     >              0.12686459D+01, -0.52691593D-01, -0.32305446D-01/
C     
C     WHITE FIR/GRAND FIR  Central Idaho Taper Project
      DATA (F(I,23),I=10,47)/  0.46115714D+00,  0.76559415D+00,
     >              0.34060552D-03, -0.30187113D+01,  0.18558991D+00,
     >              0.58513312D+00,  0.00000000D+00,  0.0,
     >              0.00000000D+00,  0.00000000D+00,  0.00000000D+00,
     >              0.60000000D+00,  0.75390116D-02, -0.54641559D-01,
     >             -0.71474657D+00, -0.21927762D+00, -0.79239041D+00,
     >             -0.36733966D+01,  0.10226880D+01,  0.11219032D+02,
     >             -0.22914712D+02, -0.28447877D+01,  0.56456140D+01,
     >             -0.42442105D-01,  0.35585986D+01,  0.43315667D+00,
     >             -0.10654660D+01,  0.34912661D+00,  0.70000000D+01,
     >              0.39050075D+01, -0.17010062D+01, -0.29678271D-01,
     >              0.70100000D+01,  0.00000000D+00,  0.0,
     >              0.18993115D+01, -0.32633160D+00, -0.13456331D+00/
     
c                                            Set counter for regional adjs
c                               Check for regional modifications requested
      JRSP=JSP
      IF (GEOSUB.ne.'00') then 
c                                  And check whether they exist
        IF (JSP.EQ.11.and.(geosub.eq.'15' .or. geosub.eq.'03')) then 
c                                     Doug fir
           geotemp = '15'
           JRSP = 10
c                                     Move all coed to JRSP=10
           DO 20 I=10,47
             F(I, JRSP) = F(I, JSP)                            
 20        continue
c                                      Overwrite with regional mods
           DO 40 IP=1,3
             IF(DFSUB(IP).eq.GEOTEMP) F(DFSUBF(IP), JRSP) = DFSUBC(IP)
 40        CONTINUE
        ELSEIF (JSP.EQ.19.and.geosub.eq.'15') THEN 
c                                       Engelmann spruce
           JRSP = 10
C                                    Move all coed to JRSP=10
           DO 22 I=10,47
             F(I, JRSP) = F(I, JSP)                            
 22        continue
C                                      Overwrite with regional mods
           DO 42 IP=1,3
             IF(ESSUB(IP).eq.GEOSUB) F(ESSUBF(IP), JRSP) = ESSUBC(IP)
 42        CONTINUE
        elseIF (JSP.EQ.13) then 
c                                     Grandfir / White fir
           JRSP = 10
c                                     Move all coed to JRSP=10
           if(geosub.eq.'15'.or.geosub.eq.'03') then
             geotemp = '15'
             DO 24, I=10,47
               F(I, JRSP) = F(I, 23)                            
 24          continue
           else
             geotemp = geosub
             DO 25 I=10,47
                F(I, JRSP) = F(I, JSP)                            
 25          continue
c                                      Overwrite with regional mods
             DO 45 IP=1,14
               IF(GFSUB(IP).eq.GEOTEMP) F(GFSUBF(IP), JRSP) = GFSUBC(IP)
 45          CONTINUE
           endif
        ELSE IF(JSP.EQ.14)THEN                            
C                                     Ponderosa pine
           JRSP = 10
c                                      Move all coed to JRSP=10
C                               central idaho
C           if(geosub.eq.'15') then
C             DO 55, I=10,47
C               F(I, JRSP) = F(I, 22)                            
C 55          continue
C           else
             DO 50, I=10,47
               F(I, JRSP) = F(I, JSP)                            
 50          continue
c                                      Overwrite with regional mods
             DO 60 IP=1,14
               IF(PPSUB(IP).eq.GEOSUB) F(PPSUBF(IP), JRSP) = PPSUBC(IP)
 60          CONTINUE
C           endif
        ELSE IF(JSP.EQ.12)THEN
c                                      Western Larch        
           JRSP = 10
c                                      Move all coed to JRSP=10
           DO 70, I=10,47
             F(I, JRSP) = F(I, JSP)                            
 70        continue
c                                      Overwrite with regional mods
           DO 80 IP=1,21
             IF(wlSUB(IP).eq.GEOSUB) F(wlSUBF(IP), JRSP) = wlSUBC(IP)
 80        CONTINUE
        ENDIF
      ENDIF
             

      DMEDIAN = f(10,JRSP) *(HT-4.5)**(f(11,JRSP)+f(12,JRSP)*HT)
      DFORM = DBH/DMEDIAN -1.0d0
c                                                                RHI1
      U7 = F(13,JRSP) + f(14,JRSP)*log(ht) + f(15,JRSP)*DFORM 
      
c                                                                RHLONGI
      U9T = f(18,JRSP) + f(19,JRSP)*log(HT) +f(20,JRSP)*DFORM
      if (U9T .lt. -7.0d0) U9T=-7.0d0      
      if (U9T .gt.  7.0d0) U9T= 7.0d0    
      U9 = f(16,JRSP)* exp(U9T)/(1.0d0 +exp(U9T) )
c                                                                 RHC
      U8 =f(21,JRSP)+f(22,JRSP)*HT +f(23,JRSP)*log(HT)+f(24,JRSP)*DFORM

c                                                         U1-U5
      U1 = f(25,JRSP) + f(26,JRSP)*log(HT) +f(27,JRSP)*DFORM 
     >               + f(28,JRSP)*DFORM*log(HT)
      U2 = f(29,JRSP) + f(30,JRSP)*DFORM + f(31,JRSP)*log(ht)
     >               + f(32,JRSP)*dform*log(ht)
     >               + f(33,JRSP)*dbh                                               
      IF(JRSP .eq. 15) then
c                                                Lodgepole Pine (INGY)
        U3 = f(34,JRSP) + f(35,JRSP)*DFORM
     >     + f(36,JRSP) * (1.0D0 - exp(f(37,JRSP)*HT) )   
      else
        U3 = f(34,JRSP) + f(35,JRSP)*DFORM + f(36,JRSP)*log(HT) 
     >     + f(37,JRSP)*log(HT)*DFORM
      end if
      U4 = f(38,JRSP) +f(39,JRSP)*DFORM +f(40,JRSP)*log(ht) 
     >     +f(41,JRSP)*DBH
      U5 = f(42,JRSP) + f(43,JRSP)*log(HT)        
c                                        U6=A3 
      U6 = f(45,JRSP) + f(46,JRSP)*DFORM  +f(47,JRSP)*log(HT)


c                                              limits on U1 to U5
      if (U1.lt. -7.0d0) U1=-7.0d0                               
      if (U1.gt.  7.0d0) U1= 7.0d0
      if (U2.lt. -7.0d0) U2=-7.0d0                               
      if (U2.gt.  7.0d0) U2= 7.0d0                               
      if (U3.lt. -7.0d0) U3=-7.0d0                               
      if (U3.gt.  7.0d0) U3= 7.0d0                               
      if (U4.lt. -7.0d0) U4=-7.0d0                               
      if (U4.gt.  7.0d0) U4= 7.0d0                               
      if (U5.lt. -7.0d0) U5=-7.0d0                               
      if (U5.gt.  7.1d0) U5= 7.1d0                                     
      if(U6 .lt. 1.005) U6=1.005D0
      if(U6 .gt. 10.0d0) U6=10.0d0
      if (U7.lt. -7.0d0) U7=-7.0d0                               
      if (U7.gt.  7.0d0) U7= 7.0d0                                
      if (U8 .gt. 0.99) U8=0.99
      if (u9.gt. 0.3d0) u9=0.3d0
      if (u9.lt. 0.0d0) u9=0.0d0

c                                         Define geometric parameters
c                                        (These outcomes are SINGLE precision)
      R1= REAL(dexp(U1)/ (1.0d0 + dexp(U1)))                             
      R2= REAL(dexp(U2)/ (1.0d0 + dexp(U2)))                             
      R3= REAL(dexp(U3)/ (1.0d0 + dexp(U3)))                             
      R4= REAL(dexp(U4)/ (1.0d0 + dexp(U4)))                             
      IF (U5 .le. 7.0d0) then
          R5= REAL(0.5d0 + 0.5d0*dexp(U5)/ (1.0d0 + dexp(U5)))                        
      else
          R5=1.0
      end if

      A3=REAL(U6)
      RHI1 =  REAL(dexp(U7) / ( 1.0d0 + dexp(U7) ))
      if (RHI1.gt. 0.5 ) RHI1=0.5 

      RHLONGI= REAL(U9)  
      RHI2 = RHI1 + RHLONGI

c      RHC = RHI2 + (1.0D0 - RHI2) * dexp(U8)/( 1.0d0 + dexp(U8))
c      If (RHC .lt. RHI2 +0.01) then
c          RHC = MIN( RHI2+0.01, (RHI2+1.0)/2.0 )
c        end if
      RHC=REAL(U8) 
      if (RHC .lt. RHI2+.01) RHC= min( RHI2+.01, (RHI2+1.)/2.0 )

C     PUT COEFFICIENTS INTO AN ARRAY FOR EASIER PASSING
      RFLW(1) = R1
      RFLW(2) = R2
      RFLW(3) = R3
      RFLW(4) = R4
      RFLW(5) = R5
      RFLW(6) = A3     
      
      RHFW(1) = RHI1
      RHFW(2) = RHI2
      RHFW(3) = RHC
      RHFW(4) = RHLONGI
      
      RETURN
      END 

c***********************************************************************
c***********************************************************************
      FUNCTION COR_C2(JSP,geosub,TOTALH,HI,HJ)
c                                                               CORRC2
c***********************************************************************
c     given 2 heights (hi and hj), estimate the correlation of the
c       Z errors in the corresponding dib's
c               NW Taper coop #2, (INGY, east-side 1995-1996)
c       coefficients 81-85

      REAL COR_C2
      character*2 geosub
      REAL*8 V(5,13), Q1,Q2,QS,Q4,Q5,Q3,CORR
      REAL TOTALH, HI, HJ,BH,H1,H2,T3,T4,T1,T2

      INTEGER JSP,JSPR

C     DOUGLAS FIR x
      DATA (V(I,1),I=1,5)/-0.48680838D+01, 0.14663798D+02,
     >    -0.48216320D+01,-0.17800924D+01,-0.20276812D+00/

C     WESTERN LARCH x
      DATA (V(I,2),I=1,5)/-0.40872513D+01, 0.98400990D+01,
     >    -0.38399599D+01,-0.24301984D+01, 0.35024803D+00/

C     GRAND FIR x
      DATA (V(I,3),I=1,5)/-0.53258004D+01, 0.18207797D+02,
     >    -0.46314647D+01,-0.12177523D+01,-0.11309926D+00/

C     PONDEROSA PINE x     
      DATA (V(I,4),I=1,5)/-0.64087039D+01, 0.18426727D+02,
     >    -0.50623505D+01,-0.21710945D+01, 0.29814748D+00/
     
C     LODGEPOLE PINE x
      DATA (V(I,5),I=1,5)/-0.63095389D+01, 0.16848451D+02,
     >    -0.41147697D+01,-0.18701241D+01, 0.65264446D+00/
                
C     WESTERN RED CEDAR                       
      DATA (V(I,6),I=1,5)/-0.37292867D+01, 0.95204603D+01,
     >    -0.31268123D+01,-0.12917494D+01,-0.26280112D+00/
     
C     MOUNTAIN HEMLOCK  
      DATA (V(I,7),I=1,5)/-0.55386062D+01, 0.13890065D+02,
     >    -0.36169043D+01,-0.10135346D+01, 0.40538989D-01/ 
                                    
C     WHITE PINE                     
      DATA (V(I,8),I=1,5)/-0.48456403D+01, 0.16415000D+02,
     >    -0.50265184D+01,-0.10653677D+01,-0.42501392D-02/

C     ENGELMANN SPRUCE                     
      DATA (V(I,9),I=1,5)/-0.41694935D+01, 0.13158633D+02,
     >    -0.46716770D+01,-0.10569956D+01,-0.77545519D+00/
     
C     SUBALPINE FIR  
      DATA (V(I,10),I=1,5)/-0.55353327D+01, 0.20954955D+02,
     >     -0.66258696D+01,-0.98999018D+00, 0.21262294D+00/
           
C     BALSAM FIR (B.C.)  
      DATA (V(I,11),I=1,5)/-0.46723264D+01, 0.15282969D+02,
     >     -0.52893666D+01,-0.14847301D+01,-0.37828956D+00/
      
C     GRAND FIR x Central Idaho Variant
      DATA (V(I,12),I=1,5)/-0.52706199D+01, 0.18147772D+02,
     >    -0.50616937D+01,-0.13304567D+01, 0.67322419D+00/

C     PONDEROSA PINE x Central Idaho Variant
      DATA (V(I,13),I=1,5)/-0.63303605D+01, 0.18704116D+02,
     >    -0.58215704D+01,-0.17448762D+01, 0.34012396D+00/
     

      BH = 4.5
      JSPR = JSP - 10
      
      if(jsp.eq.3 .and. (geosub.eq.'15'.or.geosub.eq.'03'))jspr = 12
      if(jsp.eq.4 .and. geosub.eq.'15')jspr = 13
 
      Q1=V(1, JSPR)
      Q2=V(2, JSPR)
      QS=V(3, JSPR)
      Q4=V(4, JSPR)
      Q5=V(5, JSPR)

      Q3 = QS - (Q1+Q2)

c                          any error is completely correlated with itself
      if(hi.eq.hj ) then
           cor_c2=1.0
           return
        end if
c                               There are no errors at breast height (Ha!)
c                               Correlations are irrelevant.
      if(hi.eq.bh .or. hj.eq.bh) then
              cor_c2=0.5
              return
           end if

c                              define heights h1 and h2 with h2 > h1
      h1=min(hi, hj)
      h2=max(hi,hj)
                 
      if(h1.gt. bh) then
c                                         both heights are above BH
        t3=(h1-bh)/(totalh-bh)
        t4=(h2-bh)/(totalh-bh)                                
        CORR = exp( q1*(t4-t3) + q2*(t4*t4-t3*t3)/2.0D0
     >                  +q3*(t4*t4*t4 - t3*t3*t3)/3.0D0)     
        GO TO 100
      end if

      if(h2.gt. bh)   then
c                                              h1 < Bh  and h2 > BH
         t3=(h2-bh)/(totalh-bh)                             
         T2 = (BH-H1)/BH    
         CORR = q5*exp( q4*t2 + q1*t3 +q2*t3*t3/2.0d0 
     >                    +q3*t3**3 / 3.0d0 )       
         go to 100
        end if

c                                              h1 < Bh and H2 < Bh       
c                                              note: t2 < t1
       T2 = (BH-H2)/BH                                                   
       T1 = (BH-H1)/BH                                                   
       CORR=exp( q4* (t1-t2))        

C100    IF (  abs(CORR) .gt. 1.0  .and.  ier_UNIT.ne.0) 
C     1     write(IER_UNIT,102) JSP, H1,H2, CORR
C102        FORMAT(' CORRC2 ERROR on JSP=',i3,'  H1,H2, corr =',3f8.2)

100   COR_C2 = REAL(CORR)

       return
       END


c***********************************************************************
c***********************************************************************
      SUBROUTINE VAR_C2(JSP,geosub,DBH,HT,H,SE_LNX)
c                                                             SF_VARLN
c***********************************************************************
c                Variance of dib  for species assuming lognormal errors.
c                NW Coop #2, INGY
c                   
c                         J. W. Flewelling, July, 1996 
c
c      H      input   R*4   Section height  , for h NE breast height.
c      SE_LNX output  R*4   SQRT{ VAR[ln(dib)]}

C      PARAMETER (MAXC=100)
      character*2 geosub
      REAL*8 F(12,13), V(16,13),VA00,VA01,VA02,VB00,VB01,VC0
      REAL*8 VX1,VX2,VX3,VA03,VE00,VE01,VE02,VF00,VF01,VG0
      REAL*8 DMEDIAN,DRATIO,VA0,VB0,VE0,VF0,VC,XU,X,STD_FRAC
      REAL*4 LOGHT, LVARHAT, VARHAT
      REAL DBH, HT, BH, H, SE_LNX              
      logical vmod1, vmod2
          
      INTEGER JSP,JSPR


c                                   Note: the following assignments are
c                                   for clarity. Faster execution would
c                                   be obtained by using the F() coefients
c                                   directly, and omitting the V%%% variables.

C     DOUGLAS FIR  x
      DATA (F(I,1),I=10,12)/0.19750000D+00, 0.96630000D+00, 
     >                 0.36700000D-03/
      
      DATA (V(I,1),I= 1,16)/-0.87861916D+01,
     >                 0.38942378D+00, 0.24151069D+01, 0.86871264D+01,
     >                -0.12932895D+01, 0.10448179D+01, 0.00000000D+00,
     >                 0.96526647D-01, 0.13685097D+00,-0.44306740D+00,
     >                -0.63677273D+01,-0.28346734D+00, 0.30403741D+00,
     >                 0.23458454D+01, 0.15233441D+00, 0.15821190D+01/

C     WESTERN LARCH  x
      DATA (F(I,2),I=10,12)/0.55800000D-01, 0.12635000D+01, 
     >                -0.31600000D-03/
      
      DATA (V(I,2),I= 1,16)/-0.52217635D+01,-0.23364372D+00,
     >                 0.10581464D+00, 0.76117971D+01,-0.10588704D+01,
     >                 0.11469169D+01, 0.16914337D+00, 0.35117997D-01,
     >                 0.10000000D+01, 0.39438121D-01,-0.68717202D+01,
     >                -0.40369684D-01, 0.57719712D+00,-0.48188520D+00,
     >                 0.77458363D+00, 0.29097150D+01/

C     GRAND FIR  x
      DATA (F(I,3),I=10,12)/0.61910000D+00, 0.62000000D+00,
     >                 0.11060000D-02/
      
      DATA (V(I,3),I= 1,16)/-0.77600152D+01,-0.68002365D-01,
     >                 0.30281870D+01, 0.85370762D+01,-0.10788092D+01,
     >                 0.94569668D+00, 0.00000000D+00, 0.23088981D-01,
     >                 0.87032708D+00,-0.41523979D+00,-0.53889325D+01,
     >                -0.77824215D+00, 0.93680884D+00, 0.12692083D+01,
     >                 0.52691142D+00, 0.14583838D+01/
     
C     PONDEROSA PINE  x
      DATA (F(I,4),I=10,12)/0.60780000D+00, 0.68530000D+00, 
     >                   0.89600000D-03/
      
      DATA (V(I,4),I= 1,16)/-0.57324396D+01,
     >                  -0.25574556D+00, 0.20750963D+01, 0.37746335D+01,
     >                  -0.11127807D+00, 0.13005455D+01, 0.00000000D+00,
     >                   0.56372266D-01,-0.15253253D+00,-0.40439166D+00,
     >                  -0.46449612D+01,-0.62894842D+00,-0.85690977D-01,
     >                  -0.57316015D-01, 0.56201552D+00, 0.10348040D+01/

C     LODGEPOLE PINE  x   
      DATA (F(I,5),I=10,12)/0.27880000D+00, 0.80570000D+00,
     >                 0.60300000D-03/
      
      DATA (V(I,5),I= 1,16)/-0.83307969D+01,
     >                 0.14499630D+00, 0.22757330D+01, 0.96926943D+01,
     >                -0.13015806D+01, 0.11174823D+01, 0.00000000D+00, 
     >                 0.28164929D-01, 0.10000000D+01,-0.39492882D+00,
     >                -0.19496333D+01,-0.14500534D+01,-0.26604864D+00,
     >                -0.18586386D+01, 0.12454997D+01, 0.12241344D+01/

C     WESTERN RED CEDAR  x   
      DATA (F(I,6),I=10,12)/0.12003000D+01, 0.38370000D+00,
     >                 0.23610000D-02/
      
      DATA (V(I,6),I= 1,16)/-0.75750015D+01,-0.74534057D-01,
     >                 0.28421868D+01, 0.57478382D+01,-0.36066482D+00,
     >                 0.13819886D+01, 0.00000000D+00, 0.28223671D-01,
     >                -0.10000000D+01,-0.36858293D+00,-0.63488088D+01,
     >                -0.22907055D+00, 0.62337257D+00, 0.32002232D+01,
     >                 0.14868195D+00, 0.28488670D+01/

C     MOUNTAIN HEMLOCK  x 
      DATA (F(I,7),I=10,12)/0.83820000D+00, 0.51300000D+00,
     >                0.16430000D-02/
      
      DATA (V(I,7),I= 1,16)/-0.53661720D+01,-0.63960656D+00,
     >                0.23393943D+01, 0.46136800D+01, 0.45601491D-01, 
     >                0.10292839D+01, 0.00000000D+00, 0.56691981D-01,
     >               -0.27453440D+00,-0.39145604D+00,-0.50792677D+01,
     >               -0.44971305D+00,-0.12039165D+00,-0.21584487D+01, 
     >                0.13472605D+01, 0.35584299D+01/

C     WHITE PINE    x 
      DATA (F(I,8),I=10,12)/0.49340000D+00,  0.67040000D+00, 
     >               0.72300000D-03/
      
      DATA (V(I,8),I= 1,16)/-0.74781469D+01,-0.56696621D-01,
     >               0.25621584D+01, 0.30300072D+01, 0.24739882D+00,
     >               0.10209356D+01, 0.00000000D+00, 0.51477606D-01,
     >              -0.41482008D+00,-0.38330247D+00,-0.92572316D+01, 
     >               0.25930838D+00, 0.39072598D+00, 0.26542139D+01,
     >               0.11447332D+00, 0.10846468D+01/
     
C     ENGELMANN SPRUCE
      DATA (F(I,9),I=10,12)/0.21020000D+00, 0.91540000D+00,
     >               0.37900000D-03/
      
      DATA (V(I,9),I= 1,16)/-0.97862646D+01, 0.55558106D+00,
     >               0.24780360D+01, 0.10225780D+02,-0.16303736D+01,
     >               0.10660142D+01, 0.00000000D+00, 0.46270096D-01,
     >               0.93496678D+00,-0.42025655D+00,-0.42221193D+01,
     >              -0.72661816D+00,-0.52578751D+00,-0.45541436D+01,
     >               0.20352324D+01, 0.13481250D+01/
 
C     SUBALPINE FIR
      DATA (F(I,10),I=10,12)/0.51943000D+00, 0.71090000D+00,
     >               0.50300000D-03/
      
      DATA (V(I,10),I= 1,16)/-0.16236989D+02,
     >               0.15325659D+01, 0.28717816D+01, 0.14230027D+02,
     >              -0.22483676D+01, 0.28714841D+00, 0.00000000D+00,
     >               0.82144971D-01, 0.54360298D+00,-0.45567161D+00,
     >              -0.42759971D+01,-0.70136279D+00,-0.20865044D+00,
     >               0.80246718D+00, 0.46365564D+00, 0.20164054D+01/
     
C     BALSAM (b.c)
      DATA (F(I,11),I=10,12)/0.61910000D+00, 0.62000000D+00, 
     >              0.11060000D-02/
      
      DATA (V(I,11),I=1,16)/-0.10424358D+02, 
     >              0.51847185D+00, 0.23862124D+01,
     >              0.95984104D+01,-0.11852491D+01, 0.77096585D+00,
     >              0.00000000D+00, 0.13623505D-01, 0.10000000D+01,
     >             -0.37634939D+00,-0.35299059D+01,-0.21046362D+01, 
     >              0.12369575D+01,-0.49610000D+01, 0.28054351D+01,
     >              0.68522936D+00/
     
C     GRAND FIR  x Central Idaho Taper
      DATA (F(I,12),I=10,12)/0.46115714D+00, 0.76559415D+00,
     >                   0.34060552D-03/
      
      DATA (V(I,12),I= 1,16)/-0.87229255D+01,-0.49823584D-01,
     >              0.35238539D+01, 0.93969507D+01,-0.11480943D+01,
     >              0.11385876D+01,-0.10000000D+00, 0.46648531D-01,
     >              0.63740406D+00,-0.50851998D+00,-0.35671833D+01,
     >             -0.85252043D+00,-0.34854118D+00,-0.87825360D+00,
     >              0.83369209D+00, 0.14868045D+01/
     
C     PONDEROSA PINE  x Central Idaho Taper
C      DATA (F(I,13),I=10,12)/ 0.59532444D+00, 0.71960574D+00,
C     >                   0.00000000D+00/
      
C      DATA (V(I,13),I= 1,16)/-0.29870739D+01,-0.11207714D+01,
C     >             -0.12793257D+01, 0.51821007D+01,-0.35197794D+00,
C     >              0.75094517D+00, 0.44774052D-02, 0.74892256D-01,
C     >              0.39386984D+00, 0.42129525D+00,-0.63181585D+01,
C     >             -0.19238006D+00,-0.59970586D+00, 0.16594531D+01,
C     >              0.25120253D+00, 0.85204162D+00/


      JSPR = JSP - 10
      if(jsp.eq.3 .and. (geosub.eq.'15'.or.geosub.eq.'03'))jspr = 12
C      if(jsp.eq.4 .and. geosub.eq.'15')jspr = 13
c     coef 1-16 are coef 61 to 76 in coef file
      VA00 = V(1, JSPR)
      VA01 = V(2, JSPR)
      VA02 = V(3, JSPR)
      VB00 = V(4, JSPR)
      VB01 = V(5, JSPR)
      VC0  = V(6, JSPR)

      VX1 = V(7,JSPR)
      VX2 = V(8,JSPR)
      VX3 = V(9,JSPR)

      VA03 = V(10, JSPR)
      VE00 = V(11, JSPR)
      VE01 = V(12, JSPR)
      VE02 = V(13, JSPR)
      VF00 = V(14, JSPR)
      VF01 = V(15, JSPR)
      VG0  = V(16, JSPR) 
      
                          
      BH = 4.5
      
      DMEDIAN = F(10,JSPR) *(HT - BH)**(F(11,JSPR)+F(12,JSPR)*HT)
      DRATIO = DBH/DMEDIAN 
      LOGHT = log(HT)

       VA0 = VA00 + VA01*LOGHT + VA02*DRATIO  + VA03*LOGHT*DRATIO
       VB0 = VB00 + VB01*LOGHT

       VE0 = VE00 + VE01*LOGHT + VE02*DRATIO
       VF0 = VF00 + VF01*LOGHT

       VC = VC0 + VX1*LOGHT 
       if (h .lt. bh) then
c                                                below BH
             XU = (BH-H) / BH            
             IF (XU.LT. 0.111) THEN
C                                     Special adjustment from 4 ft to BH
                VMOD1 = .TRUE.
                X = XU
                XU = 0.111
             ELSE
                VMOD1 = .FALSE.
             ENDIF
                          
             LVARHAT = REAL(VE0 + VF0*XU**VG0)
                if (LVARHAT .gt. 15.0)   LVARHAT= 15.0
                if (LVARHAT .lt. -15.0)  LVARHAT= -15.0
             VARHAT  = exp(LVARHAT)
             SE_LNX  = SQRT(VARHAT)
             IF (VMOD1)  SE_LNX = REAL(SE_LNX * X/XU)
                    
       else if (h.eq. BH)  then
c                                                at BH
             SE_LNX=0.0
       else if (h .lt. HT) then
c                                                above BH
             XU = (H - BH)/(HT - BH) 
             
             IF(XU .LT. 0.02) THEN
                VMOD2 = .TRUE.
                X = XU
                XU = 0.02
                STD_FRAC = (X/XU)
             ELSEIF (XU.GT. 0.96) THEN
                VMOD2 = .TRUE.
                X = XU
                XU = 0.96
                STD_FRAC = 1.0
             ELSE
                VMOD2 = .FALSE.
             ENDIF
              
             LVARHAT = REAL(VA0+VB0*XU**VC+VX2*(HT/50.)**VX3/(1.0-XU))
                if (LVARHAT .gt. 15.0)   LVARHAT= 15.0
                if (LVARHAT .lt. -15.0)  LVARHAT= -15.0  
             VARHAT = exp(LVARHAT) 
             SE_LNX  = SQRT(VARHAT)
             
             IF (VMOD2) SE_LNX = REAL(STD_FRAC * SE_LNX)
       else
c                                This is above total ht - meaningless.
             VARHAT = 1.0 
             SE_LNX = SQRT(VARHAT)
       end if        
       
      RETURN
      END

c***********************************************************************
c***********************************************************************
      FUNCTION FDBT_C2(JSP,GEOSUB,SETOPT,DBH,TOTHT)

c***********************************************************************
c                   given Diameter at breat height, outside bark
c                   calculate double bark thickness at breast height.
c                   NW Taper coop 2, INGY (east-side)
C              COEFFICIENT FILE - BARKBHC2.COE

c     DBH        INPUT     R*4  Diameter (o.b.) at Breast height (inches)
c     TOTHT      INPUT     R*4  Total tree height (ft)
c     FDBT_BC2   RETURNED  R*4  Double bark thickness
 
c     Note:  coefficients are from SF_SET2 (possibly file BARKBHC2.COE)
      CHARACTER*2 GEOSUB
      INTEGER JSP,JSPR,IREGION
      INTEGER setopt(6)
      REAL DBH,TOTHT,DBHMAX,DBHUSE,DBHMIN,Y2,RATIO
      REAL A(6,11), AR(23,11),A00
      REAL FDBT_C2

C     DOUGLAS FIR
      DATA (A(I,1),I=1,6)/-2.002013,0.049128,-0.000358,-0.003961,
     >        -0.0001318, 0.0/
      DATA (AR(I,1),I=11,23)/-2.136,-2.136,-2.136,-2.136,-2.136,
     >                        0.0, 0.0, 0.0, 0.0, 0.0,
     >                        -1.813,-1.977,-1.969/
     
C     WESTERN LARCH
      DATA (A(I,2),I=1,6)/ -1.757421,-0.001908,-0.000108,
     >        -0.000348, 0.0000732, 0.0/
      DATA (AR(I,2),I=11,23)/0.000, 0.000, 0.000, 0.000, 0.000,
     >                        0.0, 0.0, 0.0, 0.0, 0.0,
     >                        0.000, 0.000, 0.000/
C     GRAND FIR   
      DATA (A(I,3),I=1,6)/-2.619824,0.030658, 0.000000,-0.001651,
     >        -0.0000951, 0.0/
      DATA (AR(I,3),I=11,23)/-2.825,-2.741,-2.384,-2.654, 0.000,
     >                        0.0, 0.0, 0.0, 0.0, 0.0,
     >                        0.000,0.000, 0.000/
C     PONDEROSA PINE
      DATA (A(I,4),I=1,6)/-1.587349,0.010579,-0.000289,-0.001853,
     >        -0.0000888, 1.0/
      DATA (AR(I,4),I=11,23)/0.000, 0.000, 0.000, 0.000, 0.000, 
     >                        0.0, 0.0, 0.0, 0.0, 0.0,
     >                        0.000,0.000, 0.000/
C     LODGEPOLE PINE                      
      DATA (A(I,5),I=1,6)/-1.826117,-0.033403,-0.005038,
     >        -0.020658,0.0017612,-1.0/
      DATA (AR(I,5),I=11,23)/ 0.000, 0.000, 0.000, 0.000, 0.000, 
     >                        0.0, 0.0, 0.0, 0.0, 0.0,
     >                         0.000, 0.000, 0.000/

C     WESTERN RED CEDAR
      DATA (A(I,6),I=1,6)/-2.200198,-0.070784,0.000000, 0.000136,
     >         0.0003750, 1.0/
      DATA (AR(I,6),I=11,23)/0.000, 0.000, 0.000, 0.000, 0.000,
     >                        0.0, 0.0, 0.0, 0.0, 0.0,
     >                        0.00, 0.000, 0.000/

C     MOUNTAIN HEMLOCK
      DATA (A(I,7),I=1,6)/-2.127891,0.127621,-0.002670,-0.021932,
     >         0.0002920, 1.0/
      DATA (AR(I,7),I=11,23)/-2.189,-2.220, 0.000,-2.073, 0.000,
     >                        0.0, 0.0, 0.0, 0.0, 0.0,
     >                         0.00,-1.952,-2.290/               
     
C     WHITE PINE
      DATA (A(I,8),I=1,6)/-3.018987,0.062254,-0.001539,-0.007301,
     >         0.0001524, 0.0/
      DATA (AR(I,8),I=11,23)/ 0.000, 0.000, 0.000, 0.000, 0.000, 
     >                        0.0, 0.0, 0.0, 0.0, 0.0,
     >                         0.000, 0.000, 0.000/
     
C     ENGELMANN SPRUCE
      DATA (A(I,9),I=1,6)/-2.240592,-0.030430,-0.000011,
     >        -0.006039, 0.0002215, 1.0/
      DATA (AR(I,9),I=11,23)/-2.400,-2.210,-2.199,-2.328, 0.000,
     >                        0.0, 0.0, 0.0, 0.0, 0.0,
     >                        -2.278,-2.214,-2.198/
     
C     SUBALPINE FIR
      DATA (A(I,10),I=1,6)/-2.340455,-0.035228,0.000000,-0.007820,
     >         0.0004648, 1.0/
      DATA (AR(I,10),I=11,23)/-2.275,-2.664,-2.368,-2.232, 0.000,
     >                        0.0, 0.0, 0.0, 0.0, 0.0,
     >                         0.000, 0.000, 0.000/
     
C     BALSAM FIR (b.c.)
      DATA (A(I,11),I=1,6)/-2.520019,-0.024743,0.000000,-0.005114,
     >         0.0003716, 0.0/
      DATA (AR(I,11),I=11,23)/ 0.000, 0.000, 0.000, 0.000, 0.000,
     >                        0.0, 0.0, 0.0, 0.0, 0.0,
     >                         0.000, 0.000, 0.000/

c                Underlying Eqn:
c                     RATIO=DBT/DBHob
c                     Y2 = logit(RATIO) = ln[ ratio/(1-ratio) ]


c                                       Use Global or regional Lead coef ?
      JSPR = JSP - 10

c      doug fir
      if (jspr .eq. 1 .and. geosub .eq. '15') then
        FDBT_C2 = dbh-(-0.06933188 + 0.8981755 * dbh)
        return
c     region 3 dougfir 
      else if(jsp.eq.1 .and. geosub.eq.'03')then
        FDBT_C2 = dbh-(-0.008020069+0.853465707 * DBH)
        return
c      white fir      
      else if (jspr .eq. 3 .and. geosub .eq. '15') then
        FDBT_C2 = dbh-(0.35929539+ 0.9213101* dbh - 0.2543261*log(dbh))
        return
      else if(jsp.eq.3 .and. geosub.eq.'03')then        
c       region 3 white fir
        FDBT_C2 = dbh-(-0.2137925258 + 0.880382786*DBH)
        return
      else if (jspr .eq. 9 .and. geosub .eq. '15') then
        FDBT_C2 = dbh-(-0.2110537+ 0.9682267*dbh - 0.0053090*log(dbh))
        return
      endif

c      ponderosa pine      
C      if (jspr .eq. 4 .and. geosub .eq. '15') then
C        FDBT_C2 = dbh-(0.6817382 + 0.9548815*dbh - 0.8475764*LOG(dbh))
C        return
C      endif          
c      engelmann spruce      
        
       

       IF(GEOSUB .eq. '00'  .or. setopt(3) .eq.0) then
              A00 = A(1, JSPR)
       ELSE
              READ(GEOSUB,'(I2)') IREGION  
              A00 = AR(IREGION, JSPR)
              IF (A00 .eq. 0.0)  A00 = A(1,JSPR)
       ENDIF                                                 

*                                          Extrapolation control on DBH

       IF ( A(3,JSPR) .lt. 0.0  .and. A(6,JSPR) .eq. 0.0) then
 
              DBHmax = -( A(2,JSPR) + A(5,JSPR)*TOTHT)/ (2.0*A(3,JSPR))
              DBHuse = MIN( DBH, DBHmax) 
 
       else IF ( A(3,JSPR) .lt. 0.0  .and. A(6,JSPR) .eq. -1.0) then       
 
              DBHmin = -( A(2,JSPR) + A(5,JSPR)*TOTHT)/ (2.0*A(3,JSPR)) 
              DBHuse = MAX( DBH, DBHmin)
       else
              DBHuse = DBH
       end if 

       Y2 = A00 + A(2,JSPR)*DBHuse + A(3,JSPR)*DBHuse*DBHuse
     >          + A(4,JSPR)*TOTHT  + A(5,JSPR)*TOTHT*DBHuse
   
       IF ( Y2 .lt. -8.0) Y2=-8.0
       IF ( Y2 .gt.  8.0) Y2= 8.0
       RATIO = exp(Y2)/( 1.0+exp(Y2))
       FDBT_C2 = RATIO*DBH
                                        
       RETURN
       END 


C**********************************************************************
C**********************************************************************
      FUNCTION BRK_UPA2(JSP,DBH,TOTALH,DBT_BH,h,dib)
c                      Upper-stem bark thickness   - Function A, Coop 2
C**********************************************************************

c      h            in      R    height at which bark thickness is wanted
c      dib          in      R    Diameter outside bark at height h. 
c      brk_upa2   returned  R    Ratio of DBT/DOB at selected height
c      IER          OUT     I     0: Normal
c                                  1: the dob-dependent estimate was not
c                                    obtained due to a failure in root
c                                    finding. This represents either an
c                                    error in the upper-stem bark thickness
c                                    coefficients, or an error in programming.
c                                    (note: plausible answer is returned)
c
      
      REAL BRK_UPA2
      REAL DBH,TOTALH,DBT_BH,H,DIB,TOL
      REAL RATIO_0,RATIO1,DOB1,ERR1,RATIO,RATIO2,DOB,ERR2
      INTEGER JSP,IER,NPASS2,MODE
      REAL BRK_UPH2, BRK_UPD2, BRK_UPC2


c                 English units only
c
c               PART 1. Iteratively solve for the dob-dependent RATIO.
c
c                            Construct STARTING  guess as to DOB:
      RATIO_0 = BRK_UPH2(JSP,DBH,TOTALH,DBT_BH,h)
      RATIO1  = RATIO_0
      DOB1    = dib /(1.0 - RATIO_0)

c                            Apply the GUESS to see what we get
      RATIO  = BRK_UPD2(JSP,DBH,DBT_BH,h, DOB1)
      ERR1 = (1.0-RATIO)*DOB1 - DIB                                         

c                           Establish upper and lower bounds for RATIO
      RATIO2 = RATIO_0
      if (err1 .gt. 0.0) Then
20         RATIO2 = 0.7*RATIO2
           DOB   = dib /(1.0 - RATIO2)
           RATIO  =BRK_UPD2(JSP,DBH,DBT_BH,h, DOB)
           ERR2 = (1.0-RATIO)*DOB - DIB                             
           if (err2 .gt. 0.0) go to 20 
           GO TO 50         
      else
           NPASS2=0
30         NPASS2 = NPASS2 +1
           IF( NPASS2.gt.4 .and. ratio2 .gt. 0.5) go to 200
           RATIO2 = RATIO2 + .05
           DOB   = dib /(1.0 - RATIO2) 
            RATIO  = BRK_UPD2(JSP,DBH,DBT_BH,h, DOB)
           ERR2 = (1.0 - RATIO)*DOB - DIB    
           if (err2 .lt. 0.0) go to 30 
           GO TO 50         
      end if
        
c                     Use a root-finder to get exact ratio
c                     (DIB will be within .01% of goal when DOB is evaluated)
50    MODE=0
      TOL = -.0001*DIB
 
55    CALL SF_ZERO(RATIO1, ERR1, RATIO2, ERR2, MODE, TOL )
      
      IF (MODE.eq.1) then 
           DOB   = dib /(1.0 - RATIO1)
           RATIO  = BRK_UPD2(JSP,DBH,DBT_BH,h, DOB)
           ERR1 = (1.0-RATIO)*DOB - DIB  
           GO TO 55                       
         
      else if (mode.eq. 2) then
c                                  answer (RATIO1) is within tolerance     
             go to 300
      else
             IER=1
C             if(ier_unit .ne. 0) write(ier_unit,56) 'BRK_UPA2',IER,MODE
C56           format(1x,A8,i3,' MODE=',i3,
C     &              '( from M7SZERO),  bad (HTOP , SI)?'  )
      end if

c                   NO REASONABLE RATIO.  USE starting estimate
200   RATIO1= RATIO_0
                                   
300   RATIO2 = RATIO_0
      
      BRK_UPA2= BRK_UPC2(JSP,h, RATIO1, RATIO2)

      RETURN
      END


C**********************************************************************
C**********************************************************************
      FUNCTION BRK_UPB2(jsp,dbh,totalh,dbt_bh,h, dob)

C**********************************************************************
c         Upper (actually, non BH) stem bark thickness   - Function B, Coop 2
c         THIS is the COMBINED result (-dob and h- dependent)
c         THIS function  REQUIRES that dob is known.

c      h            in      R    height at which bark thickness is wanted
c                                  TOTHT >  h >= 0 ;  h NE 4.5
c      dob          in      R    Diameter outside bark at height h. 
c                                  dob > 0
c      brk_upb2   returned  R    Ratio of DBT/DOB at selected height
c
C      LOGICAL METRIC
      INTEGER JSP
      REAL*4  dbh,totalh,dbt_bh,RATIO_1,RATIO_2,H,DOB
      REAL*4 BRK_UPB2
      REAL BRK_UPH2, BRK_UPD2, BRK_UPC2
C                 English units only
c                       obtain the two estimates of RATIO = DBT/DOB

      RATIO_1 = BRK_UPD2(JSP,DBH,DBT_BH,h, dob)
      RATIO_2 = BRK_UPH2(JSP,DBH,TOTALH,DBT_BH,h)

      BRK_UPB2 = BRK_UPC2(JSP, h, ratio_1, ratio_2)

      RETURN
      END



C**********************************************************************
C**********************************************************************
      FUNCTION BRK_UPC2(JSP,h, ratio_1, ratio_2)

C**********************************************************************
c         Upper (actually, non BH) stem bark thickness   - Function C, Coop 2
c         THIS is the COMBINED result (-dob and h- dependent)

c      h            in      R    height at which bark thickness is wanted
c                                  TOTHT >  h >= 0 ;  h NE 4.5
c      ratio_1      in      R    DOB-dependent estimate of dbt/dob
c      ratio_2      in      R    h-dependentt estimate of dbt/dob
c                                  Both ratios MUST be > 0 and  < 1
c      brk_upC2   returned  R    Ratio of DBT/DOB at selected height
c
c       
c
      REAL BRK_UPC2
      REAL V1_1,V1_2,V1,RATIO
      INTEGER JSP,JSPR
      REAL H,RATIO_1,RATIO_2, WW(11)

C     DOUGLAS FIR
      DATA (WW(I),I=1,11)/0.76, 0.46, 0.68, 0.58, 1.00, 0.93,
     >        0.84, 0.80, 0.67, 0.68, 0.90/
      
c                 English units only
c
c 
      JSPR = JSP - 10
      if (H .gt. 4.5) then
c                       convert to estimates of bark area / (o.b. area) 
         V1_1 = 1.0 - (1.0-RATIO_1)**2
         V1_2 = 1.0 - (1.0-RATIO_2)**2
c                       make the combined estimator
         V1 = WW(JSPR)*V1_1  + (1.0 - WW(JSPR))*V1_2
         RATIO = 1.0 - SQRT( 1.0 - V1) 
        else
         RATIO=RATIO_1
        end if

      BRK_UPC2=RATIO
      
      RETURN
      END 
      

C**********************************************************************
C**********************************************************************
      FUNCTION BRK_UPD2(JSP,DBH,DBT_BH,h, dob)

C**********************************************************************
c         Upper (actually, non BH) stem bark thickness   - Function D, Coop 2
c         THIS is the "dob-dependent equations"

c      h            in      R    height at which bark thickness is wanted
c                                  TOTHT >  h >= 0 ;  h NE 4.5
c      dob          in      R    Diameter outside bark at height h. 
c                                  dob > 0
c      brk_upd2   returned  R    Ratio of DBT/DOB at selected height
c
c     This incorporates 3 submodels:
c             1)      h < BH
c             2)      h > BH  adjusted hyperbolic  (for spec with b1=0)
c             3)      h > BH  alternative model for species with b1=1

      REAL BRK_UPD2
      INTEGER JSP,JSPR
      REAL DBH, DIB, DOB, DBH_IB, DBT_BH,H,DIBMAX
      REAL*4 BK(8,11),B(5),CP(3),P,DR,DBT,DBTMIN,RATIO_BH
      
C     DOUGLAS FIR
      DATA (BK(I,1),I=1,8)/-0.28511, 0.006013, 0.00650,0,   2.7986,
     >     6.6873,0.04244, 0.00000/
C     WESTERN LARCH
      DATA (BK(I,2),I=1,8)/-0.22906,-0.000569,-0.03472,0,   3.2514,
     >     7.2262,0.03676, 0.00000/
C     GRAND FIR
      DATA (BK(I,3),I=1,8)/-0.11651, 0.000499, 0.04889, 0,   4.1898,
     >    26.5988,0.05871, 0.00000/
C     PONDEROSA PINE     
      DATA (BK(I,4),I=1,8)/-0.19942,-0.000449, 0.03997, 0,   2.8495,
     >     4.2885,0.09823, 0.00000/
C     LODGEPOLE PINE     
      DATA (BK(I,5),I=1,8)/-0.31811, 0.025982,-0.21811, 0,   3.4490,
     >    10.9047,0.06326, 0.00000/
C     WESTERN RED CEDAR     
      DATA (BK(I,6),I=1,8)/ 0.01581,-0.002937, 0.09659, 1,   0.0462,
     >    -0.0002,0.23015,-5.79308/
C     MOUNTAIN HEMLOCK
      DATA (BK(I,7),I=1,8)/-0.07488,-0.014725, 0.26396, 1,   0.0311,
     >    -0.0001,0.18066,-3.32865/
C     WHITE PINE     
      DATA (BK(I,8),I=1,8)/-0.04445,-0.006854, 0.17022, 0,  22.7604,
     >    22.9213,0.05486, 0.00000/
C     ENGELMANN SPRUCE     
      DATA (BK(I,9),I=1,8)/-0.05520,-0.000681, 0.07176, 0, 119.8049,
     >    30.0000,0.08307, 0.00000/
C     SUBALPINE FIR     
      DATA (BK(I,10),I=1,8)/-0.04229,-0.005308, 0.16093, 0, 1000.0000,
     >     0.0000,0.08730, 0.00000/
C     BALSAM FIR     
      DATA (BK(I,11),I=1,8)/-0.12405,-0.001084, 0.17016, 0, 41.4671,
     >    30.0000,0.07944, 0.00000/
c                 English units only
c      
c 
c                       obtain the two estimates of RATIO = DBT/DOB

c                                         BRK_UPD2 ROUTINE
c                                         Below-BH model
      JSPR = JSP-10
      CP(1) = BK(1,JSPR)
      CP(2) = BK(2,JSPR)
      CP(3) = BK(3,JSPR)
      B(1) = BK(4,JSPR)
      B(2) = BK(5,JSPR)
      B(3) = BK(6,JSPR)
      B(4) = BK(7,JSPR)
      B(5) = BK(8,JSPR)
      

c                 English units only
c                                         Below-BH model
      DBH_IB = DBH - DBT_BH
      if (h .lt. 4.5) then 

         P= CP(1) + CP(2)*DBH + CP(3)*DBT_BH 
         if (P .lt. -0.9)  P = -0.9
         DIB = DOB * (DBH_IB/DBH)*(DOB/DBH)**P
         if (DIB .lt. 0.5*DOB)  DIB=0.5*DOB             
         Dibmax = max( 0.99, DBH_IB / DBH )*DOB         
         if (DIB .gt. DIBmax ) DIB = DIBmax
         BRK_UPD2 = (DOB-DIB)/DOB                                 
        
      else
c
c                                         One of the two above-BH models
         if (B(1) .eq. 0.0) then
            DR = MIN( DOB/DBH , 1.0 ) 
C  exponential underflow check
            if(dr .lt. 0.07) dr = 0.07   
            DBT = DBT_BH * (
     >            ( DR*(B(2)-1.0) / (B(2) - DR**B(3)))
     >         -  (  DR**(B(4)) - 1.0)  /DBT_BH      ) 
            if (DBT .gt. 0.5*DOB)  DBT=0.5*DOB          
            Dbtmin = min( 0.01, DBT_BH / DBH ) * DOB            
            if (DBT .lt. DBTmin)   DBT = DBTmin
            BRK_UPD2 = DBT/DOB
           else
c                                         Alternate above-BH model
                                             
             RATIO_BH = DBT_BH/DBH                     
             P= B(2) + B(3)*DBH + B(4)*RATIO_BH +
     >                                    B(5)*RATIO_BH*RATIO_BH
             if (P .lt. -0.9)  P = -0.9
             DIB = DOB * (DBH_IB/DBH)*(DOB/DBH)**P
             if (DIB .lt. 0.5*DOB)  DIB=0.5*DOB             
             Dibmax = max( 0.99, DBH_IB / DBH )*DOB         
             if (DIB .gt. DIBmax ) DIB = DIBmax
             BRK_UPD2 = (DOB-DIB)/DOB                               
            end if
         end if

      RETURN
      END


C**********************************************************************
C**********************************************************************
      FUNCTION BRK_UPH2(JSP,DBH,TOTALH,DBT_BH,h)

C**********************************************************************
c         Upper (actually, non BH) stem bark thickness   - Function H, Coop 2
c         THIS is the "height-dependent equation"
c         (was fit to above-BH data;  plausible solutions for H<BH or h>BH)

c      h            in      R    height at which bark thickness is wanted
c                                  TOTHT >  h >= 0 ;  h NE 4.5
c      brk_upH2   returned  R    Ratio of DBT/DOB at selected height
c
c       
c
c     This incorporates 3 submodels:
c             1)      h < BH
c             2)      h > BH  adjusted hyperbolic  (for spec with b1=0)
c             3)      h > BH  alternative model for species with b1=1
      
      REAL BRK_UPH2
      REAL DBH,TOTALH,DBT_BH,H
      INTEGER JSP, JSPR
      REAL*4 RJ(5), BK(5,11),X,XBH,RATIO,RATIOMIN

C     DOUGLAS FIR
      DATA (BK(I,1),I=1,5)/ -2.1311, -0.3407,-0.043016,
     >     1.99440, 0.65442/
C     WESTERN LARCH
      DATA (BK(I,2),I=1,5)/ -9.9977,  7.4501, 0.000000,
     >     1.96902, 0.45589/
C     GRAND FIR
      DATA (BK(I,3),I=1,5)/  5.8731, -8.1187,-0.000535,
     >     2.70954, 0.96775/
C     PONDEROSA PINE     
      DATA (BK(I,4),I=1,5)/ 20.0000,-22.0641,-0.000667,
     >     1.85483, 0.86883/
C     LODGEPOLE PINE     
      DATA (BK(I,5),I=1,5)/ -2.1180,  0.0000, 0.000000,
     >     2.90737, 1.09057/
C     WESTERN RED CEDAR     
      DATA (BK(I,6),I=1,5)/ 20.0000,-20.7223,-0.002407, 
     >     1.53573, 1.46826/
C     MOUNTAIN HEMLOCK
      DATA (BK(I,7),I=1,5)/ -0.2539,  0.0000, 0.000000,
     >     1.08666, 3.00000/
C     WHITE PINE     
      DATA (BK(I,8),I=1,5)/ -0.5571,  0.0000, 0.000000,
     >     3.54313, 3.00000/
C     ENGELMANN SPRUCE     
      DATA (BK(I,9),I=1,5)/ 0.3963, -0.4524,-0.093202,
     >     2.14604, 3.00000/
C     SUBALPINE FIR     
      DATA (BK(I,10),I=1,5)/ 0.7086,  0.0000, 0.000000,
     >     2.20383, 2.99991/
C     BALSAM FIR     
      DATA (BK(I,11),I=1,5)/  0.3425,  0.0000, 0.000000,
     >     2.00807, 3.00000/
c                 English units only
c      
c 
c                       obtain the two estimates of RATIO = DBT/DOB

c                                         BRK_UPD2 ROUTINE
c             Below-BH model

      JSPR = JSP - 10
      RJ(1) = BK(1,JSPR)
      RJ(2) = BK(2,JSPR)
      RJ(3) = BK(3,JSPR)
      RJ(4) = BK(4,JSPR)
      RJ(5) = BK(5,JSPR)
      
c                 English units only
c
c 
c      Theory: t is a monotonic transformation of h, governed by parm RJ(5)
c              r(t) is a quadratic function that takes on the value 1 at BH.
c              RATIO = r(t) *(DBT_BH/DBHob)

      JSPR = JSP - 11
      IF (H .gt. 0.0) then
         X = (H/TOTALH)**RJ(5)
        else
         X=0.0
        end if
            
      XBH = (4.5 / TOTALH)**RJ(5)
      RATIO = DBT_BH/DBH  * ( 1.0
     >     + (RJ(1) + RJ(2)*exp(rj(3)*DBH))*(X-XBH)
     >     +  RJ(4) * ( X*X - XBH*XBH))

      IF (RATIO .gt. 0.5)  RATIO=0.5
      RATIOmin = MIN(0.01, DBT_BH/DBH)
      if (RATIO .lt. RATIOmin) RATIO=RATIOmin

      BRK_UPH2 = RATIO

      RETURN
      END
      

